<?php
define('RVK_TICKETING_SERVICE_DESK_OPENING_HOURS', variable_get('rvk_ticketing_service_desk_opening_hours'));
define('RVK_TICKETING_SERVICE_DESK_OPENING_HOUR', variable_get('rvk_ticketing_service_desk_opening_hours'));
define('RVK_TICKETING_SERVICE_DESK_OPENING_MINUTE', variable_get('rvk_ticketing_service_desk_opening_minute'));
define('RVK_TICKETING_SERVICE_DESK_DURATION', variable_get('rvk_ticketing_service_desk_duration'));
define('RVK_TICKETING_SERVICE_DESK_DAYS_TO_RESPOND', variable_get('rvk_ticketing_service_desk_days_to_respond'));
define('RVK_TICKETING_EXPIRED_INDICATION_TEXT', variable_get('rvk_ticketing_expired_indication_text'));
define('RVK_TICKETING_MAIN_HEADLINE', variable_get('rvk_ticketing_main_headline'));
define('RVK_TICKETING_MAIN_MESSAGE', variable_get('rvk_ticketing_main_message'));
define('RVK_TICKETING_USER_HEADLINE', variable_get('rvk_ticketing_user_headline'));
define('RVK_TICKETING_USER_MESSAGE', variable_get('rvk_ticketing_user_message'));
define('RVK_TICKETING_CHILD_SERVICES_MESSAGE', variable_get('rvk_ticketing_child_services_message'));
define('RVK_TICKETING_IMAGE_HEADLINE', variable_get('rvk_ticketing_image_headline'));
define('RVK_TICKETING_IMAGE_MESSAGE', variable_get('rvk_ticketing_image_message'));
define('RVK_TICKETING_MAP_LOCATION_HEADLINE', variable_get('rvk_ticketing_map_location_headline'));
define('RVK_TICKETING_MAP_LOCATION_MESSAGE', variable_get('rvk_ticketing_map_location_message'));

/**
 * MODULE FILE
 */

/**
 * Implements hook_menu().
 */
function rvk_ticketing_menu() {
  $items['abendingar/senda-inn-abendingu'] = array(
    'title' => 'Senda inn ábendingu',
    'page callback' => 'rvk_ticketing_create_indication_page',
    'access arguments' => array('view ticketing content'),
  );

  $items['abendingar/breyta-abendingu/%'] = array(
    'title' => 'Breyta ábendingu',
    'page callback' => 'rvk_ticketing_edit_indication_page',
    'access arguments' => array('edit ticketing content'),
    'page arguments' => array(2),
    'file' => 'includes/indication_edit.inc',
    'file path' => drupal_get_path('module', 'rvk_ticketing'),
  );

  $items['admin/config/services/abendingar'] = array(
    'title' => t('Ábendingar config'),
    'description' => 'Misc settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rvk_ticketing_admin'),
    'file' => 'rvk_ticketing.admin.inc',
    'file path' => drupal_get_path('module', 'rvk_ticketing'),
    'access arguments' => array('administer ticketing settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['abendingar/stjornbord'] = array(
    'title' => 'Ábendingar',
    'page callback' => 'rvk_ticketing_view_indications_page',
    'access arguments' => array('edit ticketing content'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Displays the Indication dashboard page (Stjórnborð).
 *
 * Will determine if the user works for Þjónustuborð (and then gets all the indications) or if he's working in one
 * or more departments (refactored on 14/05/2018 by @drupalviking to allow multiple values). Views have to be altered
 * as well to allow multiple values (seperated by , or a +).
 *
 * @author drupalviking
 * @return array|string
 */
function rvk_ticketing_view_indications_page() {
  global $user;
  $indications_closed_markup = "";
  $current_user = user_load($user->uid);
  if(!isset($current_user->field_svid[LANGUAGE_NONE][0])) {
    drupal_set_message("Svo virðist sem þú hafir ekki heimild til að skoða þetta svæði");
    return "";
  }

  foreach($current_user->field_svid[LANGUAGE_NONE] as $svid) {
    $user_indication_group_tid = $svid['tid'];
    $user_indication_group = taxonomy_term_load($user_indication_group_tid);
    $user_indication_group_name_array[] = $user_indication_group->name;
    $user_indication_group_tid_array[] = $user_indication_group->tid;
  }

  if(in_array('Þjónustuver', $user_indication_group_name_array)) {
    $new_indications_view = views_get_view('indications');
    $new_indications_view->set_display('indications_new');
    $new_indications_view->pre_execute();
    $new_indications_view->execute();
    $new_indications = $new_indications_view->render();

    $indications_closed_view = views_get_view('indications');
    $indications_closed_view->set_display('indications_closed');
    $indications_closed_view->pre_execute();
    $indications_closed_view->execute();
    $indications_closed_markup = $indications_closed_view->render();

    $indications_in_progress_view = views_get_view('indications');
    $indications_in_progress_view->set_display('indications_in_process');
    $indications_in_progress_view->pre_execute();
    $indications_in_progress_view->execute();
    $in_progress = $indications_in_progress_view->render();

    $indications_expired_view = views_get_view('indications');
    $indications_expired_view->set_display('indications_expired');
    $indications_expired_view->pre_execute();
    $indications_expired_view->execute();
    $expired = $indications_expired_view->render();
  }
  else {
    $new_indications_view = views_get_view('indications');
    $new_indications_view->set_display('indications_recieved');
    $new_indications_view->set_arguments(array(implode(',', $user_indication_group_tid_array)));
    $new_indications_view->pre_execute();
    $new_indications_view->execute();
    $new_indications = $new_indications_view->render();

    $indications_in_progress_view = views_get_view('indications');
    $indications_in_progress_view->set_display('indications_in_process_contextual');
    $indications_in_progress_view->set_arguments(array(implode(',', $user_indication_group_tid_array)));
    $indications_in_progress_view->pre_execute();
    $indications_in_progress_view->execute();
    $in_progress = $indications_in_progress_view->render();

    $indications_expired_view = views_get_view('indications');
    $indications_expired_view->set_display('indications_expired_contextual');
    $indications_expired_view->set_arguments(array(implode(',', $user_indication_group_tid_array)));
    $indications_expired_view->pre_execute();
    $indications_expired_view->execute();
    $expired = $indications_expired_view->render();
  }


  $build = array(
    '#markup' => "<div class='indications-new'>" . $new_indications . "</div>" .
                 "<div class='indications-in-progress'>" . $in_progress . "</div>" .
                 "<div class='indications-expired'>" . $expired . "</div>" .
                 "<div class='indications-closed'>" . $indications_closed_markup . "</div>",
  );

  return $build;
}

function _rvk_ticketing_get_user_department($user) {
  $current_user = user_load($user->uid);
  if(isset($current_user->field_svid[LANGUAGE_NONE])) {
    $deparment_taxonomy = taxonomy_term_load($current_user->field_svid[LANGUAGE_NONE][0]['tid']);
    return $deparment_taxonomy->name;
  }
}

/**
 * Implements form_alter().
 */
function rvk_ticketing_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'indications_node_form') {

    $form['#attached']['css'] = array(
      'https://js.arcgis.com/3.13/esri/css/esri.css' => array(
        'type' => 'external',
      ),
      drupal_get_path('module', 'rvk_ticketing') . '/css/geolocation.css',
      drupal_get_path('module', 'rvk_ticketing') . '/css/edit_indication_form_styles.css',
    );

    if(isset($form['#node'])) {
      if(is_object($form['#node'])) {
        global $user;
        $user_department = _rvk_ticketing_get_user_department($user);
        $is_delicate = isset($form['#node']->field_delicate_info[LANGUAGE_NONE])
          ? $form['#node']->field_delicate_info[LANGUAGE_NONE][0]['value']
          : FALSE;

        //Disables the fields that should not be shown (eg. editable)
        $form['field_indication_text']['#access'] = FALSE;
        $form['field_indication_position_x']['#access'] = FALSE;
        $form['field_indication_position_y']['#access'] = FALSE;
        $form['field_indication_location']['#access'] = FALSE;
        $form['field_indication_respond_by']['#access'] = FALSE;
        $form['field_indication_responded_at']['#access'] = FALSE;
        $form['field_indication_close_by']['#access'] = FALSE;
        $form['field_indication_closed_at']['#access'] = FALSE;
        $form['field_image']['#access'] = FALSE;

        //Create the indication text markup, to display what the original indication said and change the sort order
        //of the fields
        $form['title']['#weight'] = -20;
        $form['field_interpered_indication_text']['#weight'] = 100;
        $form['field_response']['#weight'] = 200;
        $form['field_indication_text_markup']['#weight'] = 20;

        //People who do not work in Þjónustuver cannot see the indications that are marked delicate
        //Also, if the indication is marked delicate, a normal user cannot change the delicacy status.
        if(($is_delicate && $user_department == 'Þjónustuver') || (!$is_delicate)) {
          $form['field_indication_text_markup']['#markup'] =
            '<div class="indication-text-readonly">
            <label class="control-label">Ábending</label>
            <div>
              <p>' . $form['#node']->field_indication_text[LANGUAGE_NONE][0]['value'] . "</p>
            </div>
          </div>";
        }
        else {
          $form['field_indication_text_markup']['#markup'] =
            '<div class="indication-text-readonly">
            <label class="control-label">Ábending</label>
            <div>
              <p>' . variable_get('rvk_ticketing_delicate_info') . "</p>
            </div>
          </div>";

          $form['field_delicate_info']['#access'] = FALSE;
          $form['field_interpered_indication_text']['#access'] = FALSE;
        }

        //Moves the markup into the fieldset group_indication_content
        $form['#group_children']['field_indication_text_markup'] = "group_indication_content";

        //The map and location
        if($coords_set = isset($form['#node']->field_indication_position_x[LANGUAGE_NONE][0])) {
          $xcoord = $form['#node']->field_indication_position_x[LANGUAGE_NONE][0]['value'];
          $ycoord = $form['#node']->field_indication_position_y[LANGUAGE_NONE][0]['value'];
          $form['coords_markup']['#markup'] = '<div class="location-text-readonly"><label class="control-label">X og Y hnit</label><p>X: ' . $xcoord . ' Y: ' . $ycoord . '</p></div>';
          $form['coords_markup']['#weight'] = 50;
          $form['#group_children']['coords_markup'] = "group_indication_media_items";

          $coords = array(
            'xcoord' => $xcoord,
            'ycoord' => $ycoord,
          );

          drupal_add_js($coords, 'setting');

          $form['map_markup']['#weight'] = 16;
          $form['map_markup']['#markup'] = '<div class="map-markup"><label class="control-label">Kort</label><div id="mapDiv" style="max-width: 920px"></div></div>';

          //Moves the markup into the fieldset group_indication_content
          $form['#group_children']['map_markup'] = "group_indication_media_items";
        }

        if(isset($form['#node']->field_image[LANGUAGE_NONE][0])) {
          $images = $form['#node']->field_image[LANGUAGE_NONE];
          $image_string = "<ul>";
          foreach($images as $image) {
            $image_string .= "<li>";
            $image_string .= "<img src='" . image_style_url('medium', $image['uri']) . "' />";
            $image_string .= "</li>";
          }

          $image_string .= "</ul>";

          $form['image_markup']['#markup'] = "
            <div class=\"indication-images-readonly\">
              <label class\"control-label\">Myndir</label>"
              . $image_string
              . "</div>";

          $form['#group_children']['image_markup'] = "group_indication_media_items";
        }

        if($location_set = isset($form['#node']->field_indication_location[LANGUAGE_NONE][0])) {
          $form['location_markup']['#markup'] = "<div class=\"location-text-readonly\"><label class=\"control-label\">Staðsetning</label><p>" . $form['#node']->field_indication_location[LANGUAGE_NONE][0]['value'] . "</p></div>";
          $form['#group_children']['location_markup'] = "group_indication_media_items";
        }

        $form['created_markup']['#weight'] = 39;
        $form['created_markup']['#markup'] = "<div class=\"response-by-time-readonly\"><label class=\"control-label\">Ábending barst</label><p>" . strftime('%d. %B %Y klukkan %H:%M', $form['#node']->created) . "</p> </p></div>";
        $form['#group_children']['created_markup'] = "group_indication_timestamps";

        $respond_by_date = $form['#node']->field_indication_respond_by[LANGUAGE_NONE][0]['value'];
        if($respond_by_date) {
          $respond_by_date = strtotime($respond_by_date);

          $form['respond_by_markup']['#weight'] = 40;
          $form['respond_by_markup']['#markup'] = "<div class=\"response-time-readonly\"><label class=\"control-label\">Svara þarf fyrir</label><p>" . strftime('%d. %B %Y klukkan %H:%M', $respond_by_date) . "</p> </p></div>";
          $form['#group_children']['respond_by_markup'] = "group_indication_timestamps";
        }

        //Timestamps
        if(isset($form['#node']->field_indication_responded_at[LANGUAGE_NONE][0])) {
          $responded_at_date = $form['#node']->field_indication_responded_at[LANGUAGE_NONE][0]['value'];
          if($responded_at_date) {
            $responded_at_date = strtotime($responded_at_date);

            $form['responded_at_markup']['#weight'] = 41;
            $form['responded_at_markup']['#markup'] = "<div class=\"response-time-readonly\"><label class=\"control-label\">Ábendingunni var svarað þann</label><p>" . strftime('%d. %B %Y klukkan %H:%M', $responded_at_date) . "</p> </p></div>";
            $form['#group_children']['responded_at_markup'] = "group_indication_timestamps";
          }
        }

        if(isset($form['#node']->field_indication_close_by[LANGUAGE_NONE][0])) {
          $close_by_date = $form['#node']->field_indication_close_by[LANGUAGE_NONE][0]['value'];
          if($close_by_date) {
            $close_by_date = strtotime($close_by_date);
            $form['close_by_markup']['#weight'] = 42;
            $form['close_by_markup']['#markup'] = "<div class=\"closing-time-readonly\"><label class=\"control-label\">Ljúka þarf ábendingunni fyrir</label><p>" . strftime('%d. %B %Y klukkan %H:%M', $close_by_date) . "</p> </p></div>";
            $form['#group_children']['close_by_markup'] = "group_indication_timestamps";
          }
        }

        if(isset($form['#node']->field_indication_closed_at[LANGUAGE_NONE][0])) {
          $closed_at_date = $form['#node']->field_indication_closed_at[LANGUAGE_NONE][0]['value'];
          if($closed_at_date) {
            $closed_at_date = strtotime($closed_at_date);
            $form['closed_at_markup']['#weight'] = 43;
            $form['closed_at_markup']['#markup'] = "<div class=\"closing-time-readonly\"><label class=\"control-label\">Ábendingunni var lokað þann</label><p>" . strftime('%d. %B %Y klukkan %H:%M', $closed_at_date) . "</p> </p></div>";
            $form['#group_children']['closed_at_markup'] = "group_indication_timestamps";
          }
        }
      }
    }

    $expired = rvk_ticketing_check_if_response_time_is_expired($form, $form_state);
    if($expired) {
      $form['field_indication_expired_markup']['#weight'] = -50;
      $form['field_indication_expired_markup']['#markup'] =
        '<div class="indication-expired-readonly"><div><p>' . RVK_TICKETING_EXPIRED_INDICATION_TEXT . '</p></div></div>';

      //Moves the markup into the fieldset group_indication_content
      $form['#group_children']['field_indication_expired_markup'] = "group_indication_content";
    }

    $form['#attached']['js'] = array(
      'https://js.arcgis.com/3.13/init.js' => array(
        'type' => 'external',
      ),
      drupal_get_path('module', 'rvk_ticketing') . '/js/map_for_indications.js',
      drupal_get_path('module', 'rvk_ticketing') . '/js/indication.js',
    );

    $arg = arg(2);
    $arg = substr($arg, 0, 4);
    if(($form_id == 'indications_node_form') && ($arg == 'edit')){
      drupal_goto('/abendingar/breyta-abendingu/' . $form['nid']['#value']);
    }
  }
}

function rvk_ticketing_check_if_response_time_is_expired(&$form, &$form_state) {
  $respond_by = (isset($form['#node']->field_indication_respond_by[LANGUAGE_NONE][0]))
    ? $form['#node']->field_indication_respond_by[LANGUAGE_NONE][0]['value']
    : null;
  $responded_at = (isset($form['#node']->field_indication_responded_at[LANGUAGE_NONE][0]))
    ? $form['#node']->field_indication_responded_at[LANGUAGE_NONE][0]['value']
    : null;

  $close_by = (isset($form['#node']->field_indication_close_by[LANGUAGE_NONE][0]))
    ? $form['#node']->field_indication_close_by[LANGUAGE_NONE][0]['value']
    : null;

  $closed_at = (isset($form['#node']->field_indication_closed_at[LANGUAGE_NONE][0]))
    ? $form['#node']->field_indication_closed_at[LANGUAGE_NONE][0]['value']
    : null;

  return rvk_ticketing_process_expiration_times($respond_by, $responded_at, $close_by, $closed_at);
}

function rvk_ticketing_process_expiration_times($respond_by, $respsonded_at, $close_by, $closed_at) {
  $today = str_replace(' ', 'T', strftime('%Y-%m-%d %H:%M:%S'));

  //If the indication is closed, the response time is no longer expired, even if it was at one point
  if(isset($closed_at)) {
    return FALSE;
  }

  if(isset($close_by)) {
    return (strcmp($today, $close_by) == 1) ? TRUE : FALSE;
  }

  if(isset($respond_by) || !isset($close_by) ) {
    return (strcmp($today, $respond_by) == 1) ? TRUE : FALSE;
  }

  return FALSE;
}

/**
 * Implements hook_node_presave().
 */
function rvk_ticketing_node_presave($node) {
  if($node->type == 'indications' && $node->is_new == FALSE) {
    $indication_type_voc = taxonomy_vocabulary_machine_name_load('indication_types');
    $service_desk_tid = _rvk_ticketing_find_indication_status_by_name($indication_type_voc->vid, 'Þjónustuver');
    $indication_status_voc = taxonomy_vocabulary_machine_name_load('indication_status');
    $indication_new_tax = _rvk_ticketing_find_indication_status_by_name($indication_status_voc->vid, 'Ný ábending');
    $indication_received_tax = _rvk_ticketing_find_indication_status_by_name($indication_status_voc->vid, 'Móttekin');

    // If the status is not set, it's because we're going through the initial save of the node. Set the status to
    // Þjónustuver, but do not go through any of the other test cases.
    if(!isset($node->field_indication_type_ref[LANGUAGE_NONE][0])) {
      $node->field_indication_type_ref[LANGUAGE_NONE][0]['tid'] = $service_desk_tid->tid;
      $node->field_indication_responded_at[LANGUAGE_NONE][0] = NULL;
      $node->field_indication_close_by[LANGUAGE_NONE][0] = NULL;
      $node->field_indication_closed_at[LANGUAGE_NONE][0] = NULL;
    }
    else {
      //If the indication is being sent to external department (as configured in a taxonomy), we'll just close the
      //Indication
      if(isset($node->field_forward_to_external_dp[LANGUAGE_NONE][0])) {
        if(isset($node->field_forward_to_external_dp[LANGUAGE_NONE][0]['tid'])) {
          $indication_tax = _rvk_ticketing_find_indication_status_by_name($indication_status_voc->vid, 'Lokið');
          $node->field_indication_status_ref[LANGUAGE_NONE][0]['tid'] = $indication_tax->tid;
        }
      }

      //If service desk is changing the indication type reference to another department, check if they have changed the
      //status of the indication, and if not, change it to received.
      if($node->field_indication_type_ref[LANGUAGE_NONE][0]['tid'] != $service_desk_tid->tid) {
        if($node->field_indication_status_ref[LANGUAGE_NONE][0]['tid'] == $indication_new_tax->tid) {
          $node->field_indication_status_ref[LANGUAGE_NONE][0]['tid'] = $indication_received_tax->tid;
        }
      }

      //If there is text in the indication response or the status is no longer Ný ábending, we'll create a new timestamp
      // and log the time it was answered.
      if(isset($node->field_indication_response[LANGUAGE_NONE][0]) ||
        $node->field_indication_status_ref[LANGUAGE_NONE][0]['tid'] != $indication_new_tax->tid) {
        if(!isset($node->field_indication_responded_at[LANGUAGE_NONE][0])) {
          $respond_at = new DateTime('now');
          $respond_at = $respond_at->format('Y-m-d H:i:s');
          $respond_at = str_replace(' ', 'T', $respond_at);
          $node->field_indication_responded_at[LANGUAGE_NONE][0]['value'] = $respond_at;
          $node->field_indication_responded_at[LANGUAGE_NONE][0]['timezone'] = 'Atlantic/Reykjavik';
        }
      }

      //If there is a timestamp for when the indication was answered for the first time, we need to calculate when the
      //indication has to be closed completely
      if(isset($node->field_indication_responded_at[LANGUAGE_NONE][0])) {
        if(!isset($node->field_indication_close_by[LANGUAGE_NONE][0])) {
          if(isset($node->field_indication_type_ref[LANGUAGE_NONE][0])) {
            $indication_category = taxonomy_term_load($node->field_indication_type_ref[LANGUAGE_NONE][0]['tid']);

            $second_response_time = rvk_ticketing_get_last_response_date(
              new DateTime('now'), $indication_category->field_indication_response_time[LANGUAGE_NONE][0]['value']
            )->format('Y-m-d H:i:s');
            $second_response_time = str_replace(' ', 'T', $second_response_time);
          }
          else {
            $second_response_time = rvk_ticketing_get_last_response_date(
              new DateTime('now'), 2
            )->format('Y-m-d H:i:s');
            $second_response_time = str_replace(' ', 'T', $second_response_time);
          }

          $node->field_indication_close_by[LANGUAGE_NONE][0]['value'] = $second_response_time;
          $node->field_indication_close_by[LANGUAGE_NONE][0]['timezone'] = 'Atlantic/Reykjavik';
        }
      }

      //If the indication is closed, we need to record that timestamp, and also fill inn all the other timestamps that
      //are missing (e.g. if the indication is closed right away).
      if(isset($node->field_indication_status_ref[LANGUAGE_NONE][0])) {
        $status_term = taxonomy_term_load($node->field_indication_status_ref[LANGUAGE_NONE][0]['tid']);
        if($status_term->name == "Lokið") {
          if(!isset($node->field_indication_respond_by[LANGUAGE_NONE][0])) {
            $respond_by = rvk_ticketing_get_last_response_date(
              new DateTime('now'), 2
            )->format('Y-m-d H:i');
            $respond_by = str_replace(' ', 'T', $respond_by);
            $node->field_indication_respond_by[LANGUAGE_NONE][0]['value'] = $respond_by;
            $node->field_indication_respond_by[LANGUAGE_NONE][0]['timezone'] = 'Atlantic/Reykjavik';
          }
          if(!isset($node->field_indication_responded_at[LANGUAGE_NONE][0])) {
            $responded_at = new DateTime('now');
            $responded_at = $responded_at->format('Y-M-d H:i:s');
            $responded_at = str_replace(' ', 'T', $responded_at);
            $node->field_indication_responded_at[LANGUAGE_NONE][0]['value'] = $responded_at;
            $node->field_indication_responded_at[LANGUAGE_NONE][0]['timezone'] = 'Atlantic/Reykjavik';
          }
          if(!isset($node->field_indication_close_by[LANGUAGE_NONE][0])) {
            $close_by = rvk_ticketing_get_last_response_date(
              new DateTime('now'), 2
            )->format('Y-m-d H:i');
            $close_by = str_replace(' ', 'T', $close_by);
            $node->field_indication_close_by[LANGUAGE_NONE][0]['value'] = $close_by;
            $node->field_indication_close_by[LANGUAGE_NONE][0]['timezone'] = 'Atlantic/Reykjavik';
          }
          if(!isset($node->field_indication_closed_at[LANGUAGE_NONE][0])) {
            $closed_at = new DateTime('now');
            $closed_at = $closed_at->format('Y-m-d H:i:s');
            $closed_at = str_replace(' ', 'T', $closed_at);
            $node->field_indication_closed_at[LANGUAGE_NONE][0]['value'] = $closed_at;
            $node->field_indication_closed_at[LANGUAGE_NONE][0]['timezone'] = 'Atlantic/Reykjavik';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function rvk_ticketing_permission() {
  return array(
    'view ticketing content' => array(
      'title' => t('View ticketing content'),
    ),
    'edit ticketing content' => array(
      'title' => t('Edit ticketing content'),
    ),
    'administer ticketing content' => array(
      'title' => t('Administer ticketing content'),
    ),
    'administer ticketing settings' => array(
      'title' => t('Administer ticketing settings'),
    ),
  );
}

/**
 * Creates a page for the ticket to be displayed on
 *
 * @return array
 */
function rvk_ticketing_create_indication_page() {
  $build = array(
    'indication_form' => drupal_get_form('rvk_ticketing_create_ticket_form'),
  );

  return $build;
}

/**
 * Implements hook_block_info().
 */
function rvk_ticketing_block_info() {
  $blocks['indication_form'] = array(
    'info' => 'Ábendingarform',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function rvk_ticketing_block_view($delta = '') {
  $markup = '';
  if($delta == 'indication_form') {
    $form = drupal_get_form('rvk_ticketing_create_ticket_form');
    $markup .= drupal_render($form);
  }

  $block['content'] = $markup;

  return $block;
}


/**
 * Form for submission of Incident
 *
 * @author Drupalviking (drupalviking@1xinternet.de)
 * @param $form
 * @param $form_state
 * @return mixed
 */
function rvk_ticketing_create_ticket_form($form, &$form_state) {
  $form['#attached']['css'] = array(
    'https://js.arcgis.com/3.13/esri/css/esri.css' => array(
      'type' => 'external',
    ),
    drupal_get_path('module', 'rvk_ticketing') . '/css/geolocation.css',
    drupal_get_path('module', 'rvk_ticketing') . '/css/create_indication_form_styles.css',
  );

  // Because we have many fields with the same values, we have to set
  // #tree to be able to access them.
  $form['#tree'] = TRUE;

  $form['child_services_fieldset'] = array(
    '#type' => 'fieldset',
    '#weight' => 10,
  );

  $form['child_services_fieldset']['child_services_message'] = array(
    '#type' => 'markup',
    '#markup' => "<div class='child-services-markup'><p>" . RVK_TICKETING_CHILD_SERVICES_MESSAGE . "</p></div>",
    '#weight' => -50,
  );

  $form['indication_fieldset'] = array(
    '#type' => 'fieldset',
    '#weight' => 10,
  );

  $form['indication_fieldset']['indication_text_fieldset'] = array(
    '#type' => 'fieldset',
    '#weight' => 10,
  );

  $form['indication_fieldset']['image_fieldset'] = array(
    '#type' => 'fieldset',
    '#weight' => 32,
    '#prefix' => '<div id="images-fieldset-wrapper">',
    '#suffix' => '</div>',
  );

  $form['indication_fieldset']['image_fieldset']['pre_markup'] = array(
    '#type' => 'markup',
    '#weight' => 1,
    '#markup' => '<h3><span class="toggle-icon"></span>' . RVK_TICKETING_IMAGE_HEADLINE . '</h3><div class="collapse">'
  );

  $form['indication_fieldset']['image_fieldset']['post_markup'] = array(
    '#type' => 'markup',
    '#weight' => 100,
    '#markup' => '</div>',
  );

  $form['indication_fieldset']['image_fieldset']['image'] = array(
    '#type' => 'fieldset',
    '#weight' => 25
  );

  $form['indication_fieldset']['map_fieldset'] = array(
    '#type' => 'fieldset',
    '#weight' => 30,
  );

  $form['indication_fieldset']['map_fieldset']['pre_markup'] = array(
    '#type' => 'markup',
    '#weight' => 1,
    '#markup' => '<h3><span class="toggle-icon"></span>' . RVK_TICKETING_MAP_LOCATION_HEADLINE . '</h3><div class="collapse">'
  );

  $form['indication_fieldset']['map_fieldset']['post_markup'] = array(
    '#type' => 'markup',
    '#weight' => 100,
    '#markup' => '</div>',
  );

  $form['indication_fieldset']['map_fieldset']['map'] = array(
    '#type' => 'fieldset',
    '#weight' => 20,
  );

  $form['indication_fieldset']['map_fieldset']['address'] = array(
    '#type' => 'fieldset',
    '#weight' => 30,
  );

  $form['personal_info_fieldset'] = array(
    '#type' => 'fieldset',
    '#weight' => 20,
  );

  $form['indication_fieldset']['markup'] = array(
    '#type' => 'markup',
    '#markup' => "<h2>" . RVK_TICKETING_MAIN_HEADLINE . "</h2><p>" . RVK_TICKETING_MAIN_MESSAGE . "</p>",
  );

  $form['indication_fieldset']['indication_text_fieldset']['title'] = array(
    '#type' => 'textfield',
    '#title' => 'Titill',
    '#required' => TRUE,
  );

  $form['indication_fieldset']['indication_text_fieldset']['content'] = array(
    '#type' => 'textarea',
    '#title' => 'Efni ábendingar',
    '#required' => TRUE,
  );

  $form['age'] = array(
    '#type' => 'hidden',
    '#title' => 'age',
  );


  // Build the fieldset with the proper number of names. We'll use
  // $form_state['num_images'] to determine the number of textfields to build.
  if (empty($form_state['num_images'])) {
    $form_state['num_images'] = 1;
  }
  for ($i = 0; $i < $form_state['num_images']; $i++) {
    $form['indication_fieldset']['image_fieldset']['image'][$i] = array(
      '#type' => 'managed_file',
      '#title' => 'Mynd',
      '#description' => RVK_TICKETING_IMAGE_MESSAGE,
      '#upload_location' => 'public://indication_images/',
      '#weight' => 50,
    );
  }

  $form['indication_fieldset']['image_fieldset']['image']['add_image'] = array(
    '#type' => 'submit',
    '#value' => t('Add one more'),
    '#submit' => array(
      'rvk_ticketing_add_more_add_one_image',
    ),
    '#weight' => 70,
    // See the examples in ajax_example.module for more details on the
    // properties of #ajax.
    '#ajax' => array(
      'callback' => 'rvk_ticketing_add_image_callback',
      'wrapper' => 'images-fieldset-wrapper',
    ),
  );

  $form['indication_fieldset']['map_fieldset']['markup_location'] = array(
    '#type' => 'markup',
    '#markup' => '<p>' . RVK_TICKETING_MAP_LOCATION_MESSAGE . '</p>',
    '#weight' => 21,
  );

  $form['indication_fieldset']['map_fieldset']['map']['map_markup'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="mapDiv">',
    '#postfix' => '</div>',
    '#markup' => '<div id="LocateButton"></div>',
    '#weight' => 20,
  );

  $form['indication_fieldset']['map_fieldset']['address']['address'] = array(
    '#type' => 'textfield',
    '#title' => 'Staðsetning (Götuheiti í nefnifalli)',
    '#autocomplete_path' => 'gata/fletta_upp_gotu_autocomplete_callback',
    '#weight' => 10,
  );

  $form['indication_fieldset']['map_fieldset']['xcoords'] = array(
    '#type' => 'hidden',
    '#title' => 'xcoords',
    '#attributes' => array(
      'id' => array('xcoords')
    ),
  );

  $form['indication_fieldset']['map_fieldset']['ycoords'] = array(
    '#type' => 'hidden',
    '#title' => 'ycoords',
    '#attributes' => array(
      'id' => array('ycoords')
    ),
  );

  $form['personal_info_fieldset']['markup'] = array(
    '#type' => 'markup',
    '#markup' => "<h2>" . RVK_TICKETING_USER_HEADLINE . "</h2><p>" . RVK_TICKETING_USER_MESSAGE . "</p>",
  );

  $form['personal_info_fieldset']['person'] = array(
    '#type' => 'fieldset',
    '#weight' => 20,
  );

  $form['personal_info_fieldset']['person']['name'] = array(
    '#type' => 'textfield',
    '#title' => 'Nafn',
    '#required' => TRUE,
  );

  $form['personal_info_fieldset']['person']['email'] = array(
    '#type' => 'textfield',
    '#title' => 'Netfang',
    '#required' => TRUE,
  );

  $form['personal_info_fieldset']['person']['tel'] = array(
    '#type' => 'textfield',
    '#title' => 'Sími',
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Senda',
    '#weight' => 200,
  );

  $form['#attached']['js'] = array(
    'https://js.arcgis.com/3.13/init.js' => array(
      'type' => 'external',
    ),
    drupal_get_path('module', 'rvk_ticketing') . '/js/geolocation.js',
    drupal_get_path('module', 'rvk_ticketing') . '/js/indication.js',
  );

  return $form;
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function rvk_ticketing_add_image_callback($form, &$form_state) {
  $return =  $form['indication_fieldset']['image_fieldset'];
  return $return;
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function rvk_ticketing_add_more_add_one_image($form, &$form_state) {
  $form_state['num_images']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_form_validate().
 */
function rvk_ticketing_create_ticket_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  if(strlen($values['indication_fieldset']['map_fieldset']['address']['address']) > 0) {
    if(!rvk_ticketing_check_street_address_valid($values['indication_fieldset']['map_fieldset']['address']['address'])) {
      form_set_error('address', 'Svo virðist sem ekki hafi verið valið rétt heimilisfang.');
    }
  }
}

/**
 * Checks to see if the address entered is valid, by looking up the address name
 * at Borgarvefsja API
 *
 * @param string $address The Address to validate
 * @return bool
 */
function rvk_ticketing_check_street_address_valid($address) {
  $street = borgarvefsja_search_by_address($address);
  return($street[0]['text'] != $address) ? false : true;
}

function rvk_ticketing_preprocess_field(&$variables) {
  if($variables['element']['#field_name'] == 'field_indication_status_ref') {
    switch($variables['items'][0]['#markup']) {
      case 'Móttekin' :
        $variables['classes_array'][] = 'received';
        break;
      case 'Í úrvinnslu' :
        $variables['classes_array'][] = 'in_progress';
        break;
      case 'Lokið' :
        $variables['classes_array'][] = 'closed';
        break;
      case 'Ný ábending' :
      default :
        $variables['classes_array'][] = 'new_indication';
        break;
    }
  }
}

function rvk_ticketing_preprocess_node(&$variables) {
  /**
   * Indication pages need to have some extra css/js material, plus some variables from the node exposed.
   */
  if($variables['type']== 'indications' ) {
    if(isset($variables['field_delicate_info'])) {
      if($variables['field_delicate_info'][0]['value'] == TRUE) {
        $variables['content']['field_indication_text'][0]['#markup'] = variable_get('rvk_ticketing_delicate_info');
      }
    }
    if(isset($variables['field_indication_position_x'])) {
      if(isset($variables['field_indication_position_x'][0])) {
        $xcoord = $variables['field_indication_position_x'][0]['value'];
        $ycoord = $variables['field_indication_position_y'][0]['value'];

        $coords = array(
          'xcoord' => $xcoord,
          'ycoord' => $ycoord,
        );

        drupal_add_css(drupal_get_path('module', 'rvk_ticketing') . '/css/esri.css');
        drupal_add_css(drupal_get_path('module', 'rvk_ticketing') . '/css/geolocation.css');
        drupal_add_css(drupal_get_path('module', 'rvk_ticketing') . '/css/edit_indication_form_styles.css');
        drupal_add_js('https://js.arcgis.com/3.13/init.js');
        drupal_add_js(drupal_get_path('module', 'rvk_ticketing') . '/js/indication.js');
        drupal_add_js(drupal_get_path('module', 'rvk_ticketing') . '/js/map_for_indications.js');
        drupal_add_js($coords, 'setting');
      }
    }

    $respond_by = (isset($variables['field_indication_respond_by'][LANGUAGE_NONE]))
      ? $variables['field_indication_respond_by'][LANGUAGE_NONE][0]['value']
      : null;

    $responded_at = (isset($variables['field_indication_responded_at'][LANGUAGE_NONE]))
      ? $variables['field_indication_responded_at'][LANGUAGE_NONE][0]['value']
      : null;

    $close_by = (isset($variables['field_indication_close_by'][LANGUAGE_NONE]))
      ? $variables['field_indication_close_by'][LANGUAGE_NONE][0]['value']
      : null;

    $closed_at = (isset($variables['field_indication_closed_at'][LANGUAGE_NONE]))
      ? $variables['field_indication_closed_at'][LANGUAGE_NONE][0]['value']
      : null;

    if(rvk_ticketing_process_expiration_times($respond_by, $responded_at, $close_by, $closed_at)) {
      $expired = array(
        'display_expired_status' => user_access('edit ticketing content'),
        'expired_status' => TRUE,
        'expired_text' => RVK_TICKETING_EXPIRED_INDICATION_TEXT,
      );
    }
    else {
      $expired = array(
        'display_expired_status' => user_access('edit ticketing content'),
        'expired_status' => FALSE,
        'expired_text' => '',
      );
    }

    drupal_add_js($expired, 'setting');
  }
  elseif($variables['type'] == 'page') {
    if($variables['title'] == 'Takk fyrir ábendinguna') {
      $param = drupal_get_query_parameters();
      $path = $GLOBALS['base_url'] . '/abendingar/' . $param['nid'];

      $variables['content']['body'][0]['#markup'] =
        $variables['content']['body'][0]['#markup'] . '<p><a href="' . $path . '">' . $path . '</a></p>';
    }
  }
}

/**
 * Implements hook_preprocess_page
 */
function rvk_ticketing_preprocess_page(&$variables) {

  if(isset($variables['page'])) {
    if(isset($variables['theme_hook_suggestions'])) {
      if(in_array('page__abendingar__stjornbord', $variables['theme_hook_suggestions'])) {
        drupal_add_css(drupal_get_path('module', 'rvk_ticketing') . '/css/indication_dashboard.css');
      }
    }
  }
}

/**
 * Implements hook_form_submit().
 *
 * @throws Exception
 */
function rvk_ticketing_create_ticket_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  if(isset($values['indication_fieldset'])) {
    if(isset($values['indication_fieldset']['image_fieldset'])) {
      if(isset($values['indication_fieldset']['image_fieldset']['image'])) {
        foreach($values['indication_fieldset']['image_fieldset']['image'] as $key => $image) {
          if(is_numeric($key)) {
            if($image != 0) {
              $file = file_load((int)$image);
              $file->status = FILE_STATUS_PERMANENT;
              file_save($file);
              $values['images'][] = $file;
            }
            else {
              if(!isset($values['images'])) {
                $values['images'] = null;
              }
            }
          }
        }
      }
    }
  }

  if(strlen($values['indication_fieldset']['map_fieldset']['xcoords']) == 0
    && strlen($values['indication_fieldset']['map_fieldset']['ycoords']) == 0
    && strlen($values['indication_fieldset']['map_fieldset']['address']['address']) > 0) {
    //Send another query to the Street lookup API, to get the X and Y coords
    $street = borgarvefsja_search_by_address($values['indication_fieldset']['map_fieldset']['address']['address']);
    $values['indication_fieldset']['map_fieldset']['xcoords'] = $street[0]['x'];
    $values['indication_fieldset']['map_fieldset']['ycoords'] = $street[0]['y'];
  }

  $node = rvk_ticketing_create_indication_node($values);

  drupal_goto(variable_get('rvk_ticketing_thank_you_page'), array(
    "query" => array(
      "nid" => $node->nid
      ),
    )
  );
}

/**
 * Creates one indication node, based on the values the user submits.
 *
 * @param array $data The data comes from a form
 * @return \stdClass
 * @throws Exception
 */
function rvk_ticketing_create_indication_node($data) {
  $node = new stdClass();
  $node->title = $data['indication_fieldset']['indication_text_fieldset']['title'];
  $node->type = 'indications';
  node_object_prepare($node);

  $node->field_indication_text[LANGUAGE_NONE][0]['value'] = $data['indication_fieldset']['indication_text_fieldset']['content'];
  $node->field_interpered_indication_text[LANGUAGE_NONE][0]['value'] = $data['indication_fieldset']['indication_text_fieldset']['content'];
  if(strlen($data['indication_fieldset']['map_fieldset']['address']['address']) > 0) {
    $node->field_indication_location[LANGUAGE_NONE][0]['value'] = $data['indication_fieldset']['map_fieldset']['address']['address'];
    if(strlen($data['indication_fieldset']['map_fieldset']['xcoords']) > 0) {
      $node->field_indication_position_x[LANGUAGE_NONE][0]['value'] = $data['indication_fieldset']['map_fieldset']['xcoords'];
      $node->field_indication_position_y[LANGUAGE_NONE][0]['value'] = $data['indication_fieldset']['map_fieldset']['ycoords'];
    }
  }
  elseif(strlen($data['indication_fieldset']['map_fieldset']['xcoords']) > 0) {
    $node->field_indication_position_x[LANGUAGE_NONE][0]['value'] = $data['indication_fieldset']['map_fieldset']['xcoords'];
    $node->field_indication_position_y[LANGUAGE_NONE][0]['value'] = $data['indication_fieldset']['map_fieldset']['ycoords'];
  }

  if(strlen($data['personal_info_fieldset']['person']['name']) > 0) {
    $node->field_indication_reporter_name[LANGUAGE_NONE][0]['value'] = $data['personal_info_fieldset']['person']['name'];
  }

  if(strlen($data['personal_info_fieldset']['person']['email']) > 0) {
    $node->field_indication_reporter_email[LANGUAGE_NONE][0]['value'] = $data['personal_info_fieldset']['person']['email'];
  }
  if(strlen($data['personal_info_fieldset']['person']['tel']) > 0) {
    $node->field_indication_reporter_phone[LANGUAGE_NONE][0]['value'] = $data['personal_info_fieldset']['person']['tel'];
  }

  $tax_vocabulary = taxonomy_vocabulary_machine_name_load('indication_status');
  $taxonomy = taxonomy_get_tree($tax_vocabulary->vid);
  $status_default_tid = null;
  foreach($taxonomy as $tax) {
    if($tax->name == 'Ný ábending') {
      $status_default_tid = $tax->tid;
    }
  }

  if(is_array($data['images'])) {
    foreach($data['images'] as $image) {
      $node->field_image[LANGUAGE_NONE][]['fid'] = $image->fid;
    }
  }

  $node->field_indication_status_ref[LANGUAGE_NONE][0]['tid'] = $status_default_tid;
  $node->language = 'is';
  $node->is_new = true;

  node_save($node);

  $response_time = RVK_TICKETING_SERVICE_DESK_DAYS_TO_RESPOND;
  $respond_by = strftime('%Y-%m-%d %H:%M:%S', $node->created);
  $respond_by = rvk_ticketing_get_last_response_date(
    new DateTime($respond_by), $response_time
  )->format('Y-m-d H:i:s');

  $respond_by = str_replace(' ', 'T', $respond_by);
  $node->field_indication_respond_by[LANGUAGE_NONE][0]['value'] = $respond_by;
  $node->field_indication_respond_by[LANGUAGE_NONE][0]['timezone'] = 'Atlantic/Reykjavik';
  node_save($node);

  return $node;
}

/**
 * Implements hook_views_api().
 */
function rvk_ticketing_views_api() {
  list($module, $api) = func_get_args();
  if ($module == "views" && $api == "views_default") {
    return array("api" => "3.0");
  }
}


function _rvk_ticketing_find_indication_status_by_name($vid, $status_name) {
  $results = null;
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->propertyCondition('name', $status_name, '=')
    ->execute();

  if (!empty($result['taxonomy_term'])) {
    $results = entity_load('taxonomy_term', array_keys($result['taxonomy_term']));
    $results = array_values($results);
    $results = $results[0];
  }

  return $results;
}

/**
 * Validates an Icelandic SSN number
 *
 * @param $ssn
 * @return bool
 */
function _rvk_ticketing_ssn_validation($ssn) {
  $sanitised = (string) preg_replace('/[^0-9]/','', $ssn);
  $checksum = substr($sanitised,0,1)*3;
  $checksum += substr($sanitised,1,1)*2;
  $checksum += substr($sanitised,2,1)*7;
  $checksum += substr($sanitised,3,1)*6;
  $checksum += substr($sanitised,4,1)*5;
  $checksum += substr($sanitised,5,1)*4;
  $checksum += substr($sanitised,6,1)*3;
  $checksum += substr($sanitised,7,1)*2;

  $moduloRem = 11-fmod($checksum,11);
  if (($moduloRem == '11') && (substr($sanitised,8,1) === '0')) {
    return true;
  }
  elseif ($moduloRem == 10) {
    return false;
  }
  elseif ($moduloRem == substr($sanitised,8,1)) {
    return true;
  }
  else {
    return false;
  }
}

/**
 * Returns the last day a ticket can be responded to.
 *
 * This algorithm takes into consideration, weekends, opening hours and holidays to determine when the last day is.
 *
 * @param DateTime $day
 * @return DateTime
 */
function rvk_ticketing_get_last_response_date(DateTime $day, $days_to_respond = 2) {
  $last_response_date = $day;

  //Check to see if the service desk is open (hour wise). If it isn't, then add one day
  //to the response time.
  $opening_hour = new DateTime($last_response_date->format('Y-M-d' . ' 08:20'));
  $dateVal = $last_response_date->diff($opening_hour);
  if($dateVal->h >= 8) {
    $last_response_date->modify('+1 day');
    $last_response_date->setTime(8,20);
  }
  elseif($dateVal->h < 0 || $dateVal->invert == 0) {
    $last_response_date->setTime(8,20);
  }

  //Check to see if the day is a holiday. If it is, add one day to the response time.
  if(_rvk_ticketing_is_day_a_holiday($last_response_date)) {
    $last_response_date->modify('+1 day');
  }

  //While we still have some response time left, check to see if the day is a holiday or not.
  //We always add one day to the response, but if it wasn't a holiday, we deduct one day from the
  //total days to respond.
  while($days_to_respond > 0) {
    if(_rvk_ticketing_is_day_a_holiday($last_response_date)) {
      $last_response_date->modify('+1 day');
    }

    else {
      $last_response_date->modify("+1 day");
      $days_to_respond--;
    }
  }

  //After we have deducted all the response days, we'll still have to check if that day is a holiday or not.
  //Therefor we have to go over the holidays once again.
  while(_rvk_ticketing_is_day_a_holiday($last_response_date)) {
    $last_response_date->modify('+1 day');
  }

  return $last_response_date;
}

/**
 * Determines if a day is a holiday (public or official) or not.
 *
 * @param DateTime $day
 * @return bool
 */
function _rvk_ticketing_is_day_a_holiday(DateTime $day) {
  $holidays = _rvk_ticketing_get_holidays_for_year($day->format('Y'), $day->format('H:i'));
  foreach($holidays as $holiday) {
    if( $holiday == $day ) {
      return true;
    }
  }
  if(_rvk_ticketing_is_day_on_a_weekend($day)) {
    return true;
  }

  return false;
}

/**
 * Determines if a day is on a weekend or not
 *
 * @param DateTime $day
 * @return bool
 */
function _rvk_ticketing_is_day_on_a_weekend(DateTime $day) {
  $weekday = $day->format('w');
  if($weekday == 6 || $weekday == 0 ) {
    return true;
  }

  return false;
}

/**
 * Returns an array of all holidays for a given year
 *
 * @param $year
 * @return array
 */
function _rvk_ticketing_get_holidays_for_year($year, $time) {
  $holidays = array();
  $holidays['new_years_day'] = new DateTime($year . '-01-01 ' . $time);
  $holidays['may_first'] = new DateTime($year . '-05-01 ' . $time);
  $holidays['june_seventeenth'] = new DateTime($year . '-06-17 ' . $time);
  $holidays['christmas_eve'] = new DateTime($year . '-12-24 ' . $time);
  $holidays['christmas_day'] = new DateTime($year . '-12-25 ' . $time);
  $holidays['second_of_xmas'] = new DateTime($year . '-12-26 ' . $time);
  $holidays['new_years_eve'] = new DateTime($year . '-12-31 ' . $time);
  $holidays['maundy_thursday'] = _rvk_ticketing_get_easter_sunday($year, $time)->modify('-3 day');
  $holidays['great_friday'] = _rvk_ticketing_get_easter_sunday($year, $time)->modify('-2 day');
  $holidays['easter_sunday'] = _rvk_ticketing_get_easter_sunday($year, $time);
  $holidays['easter_monday'] = _rvk_ticketing_get_easter_sunday($year, $time)->modify('+1 day');
  $holidays['ascension_of_jesus'] = _rvk_ticketing_get_easter_sunday($year, $time)->modify('+40 day');
  $holidays['petecost'] = _rvk_ticketing_get_easter_sunday($year, $time)->modify('+49 day');
  $holidays['with_monday'] = _rvk_ticketing_get_easter_sunday($year, $time)->modify('+50 day');
  $holidays['first_day_of_summer'] = _rvk_ticketing_get_first_day_of_summer($year, $time);
  $holidays['merchant_holiday'] = _rvk_ticketing_get_merchant_holiday($year, $time);

  return $holidays;
}

/**
 * Returns the date when Easter sunday comes up for given year.
 *
 * Code was aquired here (Python code) and adapted to PHP : https://github.com/solvip/icelandic_holidays/blob/master/icelandic_holidays.py
 *
 * @license MIT
 * @param $year
 * @return DateTime
 */
function _rvk_ticketing_get_easter_sunday($year, $time) {
  $a = $year % 19;
  $b = (int)($year / 100);
  $c = (int)($year % 100);
  $d = (int)($b / 4);
  $e = $b % 4;
  $f = (int)(($b + 8) / 25);
  $g = (int)(($b - $f + 1) / 3);
  $h = (19 * $a + $b -$d -$g + 15) % 30;
  $i = (int)($c / 4);
  $k = $c % 4;
  $l = (32 + 2 * $e + 2 * $i - $h - $k) % 7;
  $m = (int)(($a + 11 * $h + 22 * $l) / 451);
  $month = (int)(($h + $l - 7 * $m +114) / 31);
  $day = ((($h + $l - 7 * $m + 114) % 31) + 1);

  return new DateTime($year . '-' . $month . '-' . $day . ' ' . $time);
}

/**
 * Returns the date for first day of summer in Iceland for any given year
 *
 * The first day of summer is always the third Thursday in April
 *
 * @param $year
 * @return DateTime|static
 */
function _rvk_ticketing_get_first_day_of_summer($year, $time) {
  $day = new DateTime($year . '-04-19 ' . $time);
  while(true) {
    if($day->format('w') == 4) {
      break;
    }
    $day = $day->modify('+1 day');
  }

  return $day;
}

/**
 * Returns the date for the Merchant holiday in Iceland for any given year
 *
 * The Merchant holiday is always the first Monday in August
 *
 * @param $year
 * @return DateTime|static
 */
function _rvk_ticketing_get_merchant_holiday($year, $time) {
  $day = new DateTime($year . '-08-01 ' . $time);
  while(true) {
    if($day->format('w') == 1) {
      break;
    }
    $day = $day->modify('+1 day');
  }

  return $day;
}

/**
 * Implements hook_theme().
 */
function rvk_ticketing_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['node__indications'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--indications',
    'path' => drupal_get_path('module', 'rvk_ticketing') . '/templates',
  );
  return $theme;
}
