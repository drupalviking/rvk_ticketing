<?php

/**
 * MODULE FILE
 */

/**
 * Implements hook_menu().
 */
function rvk_ticketing_menu() {
  $items['senda-inn-abendingu'] = [
    'title' => 'Senda inn ábendingu',
    'page_callback' => 'rvk_ticketing_create_ticket_page',
    'access arguments' => ['access content'],
  ];

  $items['admin/config/services/abendingar'] = array(
    'title' => t('Ábendingar config'),
    'description' => 'Misc settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rvk_ticketing_admin'),
    'file' => 'rvk_ticketing.admin.inc',
    'file path' => drupal_get_path('module', 'rvk_ticketing'),
    'access arguments' => array('administer borgarvefsja settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function rvk_ticketing_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'indications_node_form') {
    if(isset($form['#node'])) {
      if(is_object($form['#node'])) {
        if(isset($form['#node']->field_mainmanager_id[LANGUAGE_NONE][0])) {
          $form['field_sent_to_mainmanager']['#access'] = FALSE;
          $form['field_mm_checkword_item']['#access'] = FALSE;
          $form['field_mainmanager_id']['#access'] = FALSE;
          $mm_id = $form['#node']->field_mainmanager_id[LANGUAGE_NONE][0]['value'];
          $form['field_fake']['#markup'] =
            "<p><strong>Tilkynning hefur verið send til Mainmanager. Kenni tilkynningar er: {$mm_id}</strong></p>";
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function rvk_ticketing_node_presave($node) {
  if($node->type == 'indications') {
    if(isset($node->field_sent_to_mainmanager[LANGUAGE_NONE][0])) {
      //If the checkbox "Send to Mainmanager" is checked, but the Mainmanager
      //ID field is empty, create a node in Mainmanager
      if($node->field_sent_to_mainmanager[LANGUAGE_NONE][0]['value'] == 1) {
        if(!isset($node->field_mainmanager_id[LANGUAGE_NONE][0])) {
          //Default value of 'General'
          $checkword_item_id = 15;
          if (isset($node->field_mm_checkword_item[LANGUAGE_NONE][0])) {
            $checkword_item = taxonomy_term_load(
              $node->field_mm_checkword_item[LANGUAGE_NONE][0]['tid']
            );

            $checkword_item_id = $checkword_item->field_cwi_record_id[LANGUAGE_NONE][0]['value'];
          }
          $data_object = mainmanager_create_incident_data_object(
            $node->title,
            $node->field_interpered_indication_text[LANGUAGE_NONE][0]['value'],
            $node->field_indication_reporter_name[LANGUAGE_NONE][0]['value'],
            6,
            $checkword_item_id,
            $node->field_indication_reporter_email[LANGUAGE_NONE][0]['value'],
            $node->field_indication_reporter_phone[LANGUAGE_NONE][0]['value'],
            $node->field_indication_position_x[LANGUAGE_NONE][0]['value'],
            $node->field_indication_position_y[LANGUAGE_NONE][0]['value']
          );

          $mainmanager_response = mainmanager_create_incident($data_object);
          if (is_object($mainmanager_response)) {
            if ($mainmanager_response->Success == TRUE) {
              $node->field_mainmanager_id[LANGUAGE_NONE][0]['value'] =
                $mainmanager_response->ID;
              node_save($node);
            }
            else {
              drupal_set_message('Villa kom upp við skráningu á tilkynningu í Mainmanager');
            }
          }
          else {
            //error occurred
            drupal_set_message('Villa kom upp við skráningu á tilkynningu í Mainmanager');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function rvk_ticketing_permission() {
  return array(
    'view ticketing content' => array(
      'title' => t('View ticketing content'),
    ),
    'administer ticketing content' => array(
      'title' => t('Administer ticketing content'),
    ),
  );
}

/**
 * Creates a page for the ticket to be displayed on
 *
 * @return array
 */
function rvk_ticketing_create_ticket_page() {
  $build = [
    'header_text' => [
      '#type' => 'markup',
      '#markup' => '<h2>Senda inn ábendingu</h2>',
    ],
    //'indication_form' => drupal_get_form('rvk_ticketing_create_ticket_form'),
  ];

  return $build;
}

/**
 * Implements hook_block_info().
 */
function rvk_ticketing_block_info() {
  $blocks['indication_form'] = [
    'info' => 'Ábendingarform',
  ];

  $blocks['test_block'] = [
    'info' => 'Test block for Ticketing',
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function rvk_ticketing_block_view($delta = '') {
  $markup = '';
  if($delta == 'indication_form') {
    $form = drupal_get_form('rvk_ticketing_create_ticket_form');
    $markup .= drupal_render($form);
  }

  if($delta == 'test_block') {
    $obj = new stdClass();
    $obj->MainId = 0;
    $obj->Name = "Veggjakrot í Eyjabakka";
    $obj->Description = "Það er búið að krota á hús í Eyjabakka. Vinsamlegast lagið strax";
    $obj->Contact = "Hilmar Kári Hallbjörnsson";
    $obj->ContactNumber = "8477653";
    $obj->ContactEmail = "zormoni@gmail.com";
    $obj->CheckWordID = 6;
    $obj->CheckWordItemID = 10067;
    $obj->Latidue = "360080.1816103632";
    $obj->Longitude = "406608.21893388574";
    $json_obj = json_encode($obj);
    $json_obj = str_replace('"', "'", $json_obj);
    //$token = mainmanager_get_auth_token();
    //$return = _mainmanager_curl_post('Incident/CreateIncident', $json_obj, $token);
  }

  $block['content'] = $markup;

  return $block;
}

/**
 * This is a multi step form.  Step one is at the bottom of the code, but other
 * steps are in logical order
 *
 * @author Drupalviking (drupalviking@1xinternet.de)
 * @param $form
 * @param $form_state
 * @return string
 */
function rvk_ticketing_create_ticket_form($form, &$form_state) {
  //Step two
  if(isset($form_state['storage']) && $form_state['storage']['page_two']) {
    $form['#attached']['css'] = [
      'https://js.arcgis.com/3.13/esri/css/esri.css' => [
        'type' => 'external',
      ],
      drupal_get_path('module', 'rvk_ticketing') . '/css/geolocation.css',
    ];

    $form['markup'] = [
      '#type' => 'markup',
      '#markup' => '<h2>Staðsetning á korti</h2> 
                    <p>Þú getur slegið inn heimilisfang og/eða sett punkt á kortið með því að smella 
                    á þann stað á kortinu sem tengist ábendingunni. Ef ábendingin krefst 
                    ekki staðsetningar smelltu þá á áfram.</p>',
    ];

    $form['address_fieldset'] = [
      '#type' => 'fieldset',
      '#weight' => 20,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('Address'),
    ];
    $form['map_fieldset'] = [
      '#type' => 'fieldset',
      '#weight' => 10,
      '#collapsible' => FALSE,
    ];
    $form['address_fieldset']['address'] = [
      '#type' => 'textfield',
      '#title' => 'Staðsetning (Götuheiti í nefnifalli)',
      '#autocomplete_path' => 'gata/fletta_upp_gotu_autocomplete_callback',
    ];
    $form['map_fieldset']['map_markup'] = [
      '#type' => 'markup',
      '#prefix' => '<div id="mapDiv">',
      '#postfix' => '</div>',
      '#markup' => '<div id="LocateButton"></div>',
    ];
    $form['xcoords'] = [
      '#type' => 'hidden',
      '#title' => 'xcoords',
      '#attributes' => [
        'id' => ['xcoords']
      ],
    ];
    $form['ycoords'] = [
      '#type' => 'hidden',
      '#title' => 'ycoords',
      '#attributes' => [
        'id' => ['ycoords']
      ],
    ];

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Halda áfram',
      '#weight' => 1000
    );
    $form['#attached']['js'] = array(
      'https://js.arcgis.com/3.13/init.js' => array(
        'type' => 'external',
      ),
      drupal_get_path('module', 'rvk_ticketing') . '/js/geolocation.js',
    );
  }
  //Step three
  elseif(isset($form_state['storage']) && $form_state['storage']['page_three']) {
    $form['markup'] = [
      '#type' => 'markup',
      '#markup' => '<h2>Upplýsingar um þig</h2>',
    ];
    $form['name'] = [
      '#type' => 'textfield',
      '#title' => 'Nafn',
      '#required' => TRUE,
    ];
    $form['ssn'] = [
      '#type' => 'textfield',
      '#title' => 'Kennitala',
      '#required' => TRUE,
    ];
    $form['email'] = [
      '#type' => 'textfield',
      '#title' => 'Netfang',
      '#required' => TRUE,
    ];
    $form['tel'] = [
      '#type' => 'textfield',
      '#title' => 'Sími',
    ];

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Halda áfram',
    );
  }
  //Original state (step 1) of the form
  else {
    $form['markup'] = [
      '#type' => 'markup',
      '#markup' => '<h2>Sendu okkur ábendingu</h2>',
    ];

    $form['title'] = [
      '#type' => 'textfield',
      '#title' => 'Titill',
      '#required' => TRUE,
    ];

    $form['content'] = [
      '#type' => 'textarea',
      '#title' => 'Efni ábendingar',
      '#required' => TRUE,
    ];

    $form['use_map'] = [
      '#type' => 'radios',
      '#title' => 'Nota kort eða staðsetningu með ábendingunni',
      '#options' => ['yes' => 'Já', 'no' => 'Nei'],
      '#default_value' => 'no',
   ];

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Halda áfram',
    );
  }

  return $form;
}

/**
 * Implements hook_form_validate().
 */
function rvk_ticketing_create_ticket_form_validate($form, &$form_state) {
  //If storage is not set, we're at step one
  if(isset($form_state['storage']) && $form_state['storage']['page_two'] == TRUE ) {
    $values = $form_state['values'];
    if(strlen($values['xcoords']) == 0 && strlen($values['address']) == 0) {
      form_set_error('address', 'Velja þarf annað hvort stað á korti eða slá inn heimilisfang');
    }
    elseif(strlen($values['xcoords']) == 0 && strlen($values['ycoords']) == 0 && strlen($values['address']) > 0) {
      if(!rvk_ticket_check_street_address_valid($values['address'])) {
        form_set_error('address', 'Svo virðist sem ekki hafi verið valið rétt heimilisfang.');
      }
    }
  }
}

/**
 * Checks to see if the address entered is valid, by looking up the address name
 * at Borgarvefsja API
 *
 * @param string $address The Address to validate
 * @return bool
 */
function rvk_ticket_check_street_address_valid($address) {
  $street = borgarvefsja_search_by_address($address);
  return($street[0]['text'] != $address) ? false : true;
}

/**
 * Implements hook_form_submit().
 *
 * Since it's a multistep form, validations on where the user is in it, are in
 * place.
 */
function rvk_ticketing_create_ticket_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  //If storage is not set, we're at step one
  if(!isset($form_state['storage'])) {
    if($values['use_map'] == 'yes') {
      $form_state['storage']['page_two'] = TRUE;
      $form_state['storage']['page_three'] = FALSE;
      $form_state['storage']['page_one_values'] = $values;
      $form_state['rebuild'] = TRUE;
    }
    else {
      $form_state['storage']['page_two'] = FALSE;
      $form_state['storage']['page_three'] = TRUE;
      $form_state['storage']['page_one_values'] = $values;
      $form_state['storage']['page_two_values'] = null;
      $form_state['rebuild'] = TRUE;
    }
  }
  elseif(isset($form_state['storage']) && $form_state['storage']['page_two'] == TRUE ) {
    $form_state['storage']['page_two'] = FALSE;
    $form_state['storage']['page_three'] = TRUE;
    $form_state['storage']['page_two_values'] = $values;
    $form_state['rebuild'] = TRUE;

    if(strlen($values['xcoords']) > 0 && strlen($values['ycoords']) > 0) {
      $form_state['storage']['page_two_values']['xcoord'] = $values['xcoords'];
      $form_state['storage']['page_two_values']['ycoord'] = $values['ycoords'];
      unset($form_state['storage']['page_two_values']['address']);
    }
    elseif(strlen($values['xcoords']) == 0 && strlen($values['ycoords']) == 0 && strlen($values['address']) > 0) {
      //Send another query to the Street lookup API, to get the X and Y coords
      $street = borgarvefsja_search_by_address($values['address']);
      $form_state['storage']['page_two_values']['xcoord'] = $street[0]['x'];
      $form_state['storage']['page_two_values']['ycoord'] = $street[0]['y'];
    }
  }
  elseif(isset($form_state['storage']) && $form_state['storage']['page_three'] == TRUE ) {
    $form_state['storage']['page_three_values'] = $values;
    rvk_ticketing_create_indication_node($form_state['storage']);
    drupal_set_message('<p>Takk fyrir að senda ábendingu til okkar.</p>
<p>Þjónustuver borgarinnar vinnur úr ábendingum alla virka daga og kemur þeim á réttan stað.</p> 
<p><strong>Ef um um er að ræða neyðartilfelli hafðu þá samband við 112.</strong></p>');
  }
}

/**
 * Creates one indication node, based on the values the user submits.
 *
 * @param array $data The data comes from a form
 * @return \stdClass
 */
function rvk_ticketing_create_indication_node($data) {
  $node = new stdClass();
  $node->title = $data['page_one_values']['title'];
  $node->type = 'indications';
  node_object_prepare($node);

  $node->field_indication_text[LANGUAGE_NONE][0]['value'] =
    $data['page_one_values']['content'];
  $node->field_interpered_indication_text[LANGUAGE_NONE][0]['value'] =
    $data['page_one_values']['content'];
  if(isset($data['page_two_values'])) {
    if(isset($data['page_two_values']['address'])) {
      $node->field_indication_location[LANGUAGE_NONE][0]['value'] =
        $data['page_two_values']['address'];
    }
    elseif(isset($data['page_two_values']['xcoord'])) {
      $node->field_indication_position_x[LANGUAGE_NONE][0]['value'] =
        $data['page_two_values']['xcoord'];
      $node->field_indication_position_y[LANGUAGE_NONE][0]['value'] =
        $data['page_two_values']['ycoord'];
    }
  }

  $node->field_indication_reporter_name[LANGUAGE_NONE][0]['value'] =
    $data['page_three_values']['name'];
  $node->field_indication_reporter_ssn[LANGUAGE_NONE][0]['value'] =
    $data['page_three_values']['ssn'];
  $node->field_indication_reporter_email[LANGUAGE_NONE][0]['value'] =
    $data['page_three_values']['email'];
  $node->field_indication_reporter_phone[LANGUAGE_NONE][0]['value'] =
    $data['page_three_values']['tel'];

  $tax_vocabulary = taxonomy_vocabulary_machine_name_load('indication_status');
  $taxonomy = taxonomy_get_tree($tax_vocabulary->vid);
  $status_default_tid = null;
  foreach($taxonomy as $tax) {
    if($tax->name == 'Ný ábending') {
      $status_default_tid = $tax->tid;
    }
  }
  $node->field_indication_status_ref[LANGUAGE_NONE][0]['tid'] = $status_default_tid;
  $node->language = 'is';
  $node->is_new = true;

  node_save($node);

  return $node;
}

/**
 * Implements hook_views_api().
 */
function rvk_ticketing_views_api() {
  list($module, $api) = func_get_args();
  if ($module == "views" && $api == "views_default") {
    return array("api" => "3.0");
  }
}

/**
 * Gets one Incident by ID, by calling the MainManager API
 *
 * @param int $id
 * @return \stdClass
 */
function rvk_ticketing_get_incident_by_id($id) {
  return mainmanager_get_incident_by_id($id);
}

/**
 * Populates the Checkword Items Taxonomy Vocabulary with terms from the
 * Main manager Rest API
 */
function rvk_ticketing_populate_checkword_items_taxonomy_vocabulary() {
  //ID 6 is the Checkword id MainManager gave us to use. Other id's should
  //not be of concern as of right now.
  $results = mainmanager_get_checkword_items(6);

  if(is_array($results)) {
    $tree = [];

    $vocabulary = taxonomy_vocabulary_machine_name_load('checkword_items');
    $terms = taxonomy_get_tree($vocabulary->vid);

    foreach($terms as $term) {
      $tree[$term->name] = $term->name;
    }

    foreach($results as $result) {
      if(!in_array($result['Name'], $tree)) {
        $term = new stdClass();
        $term->name = $result['Name'];
        $term->vid = $vocabulary->vid;
        taxonomy_term_save($term);

        $term->field_cwi_record_id[LANGUAGE_NONE][0]['value'] = $result['RecordID'];
        $term->field_cwi_record_id[LANGUAGE_NONE][0]['format'] = NULL;
        $term->field_cwi_record_id[LANGUAGE_NONE][0]['safe_value'] = $result['RecordID'];

        $term->field_cwi_number[LANGUAGE_NONE][0]['value'] = $result['Nr'];
        $term->field_cwi_number[LANGUAGE_NONE][0]['format'] = NULL;
        $term->field_cwi_number[LANGUAGE_NONE][0]['safe_value'] = $result['Nr'];

        $term->field_cwi_incident_mode[LANGUAGE_NONE][0]['value'] = $result['IncidentMode'][0];
        $term->field_cwi_incident_mode[LANGUAGE_NONE][0]['format'] = NULL;
        $term->field_cwi_incident_mode[LANGUAGE_NONE][0]['safe_value'] = $result['IncidentMode'][0];

        if($result['Nr'] > 9) {
          $term->weight = $result['Nr'] * 10;
        }
        else{
          $term->weight = $result['Nr'];
        }

        taxonomy_term_save($term);
      }
    }
  }
}

/**
 * Implements hook_views_default_views().
 */
function rvk_ticketing_views_default_views() {
  $export = [];

  $view = new view();
  $view->name = 'indications';
  $view->description = '';
  $view->tag = 'default';
  $view->base_table = 'node';
  $view->human_name = 'Ábendingar';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = 'Mínar ábendingar';
  $handler->display->display_options['use_ajax'] = TRUE;
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'some';
  $handler->display->display_options['pager']['options']['items_per_page'] = '10';
  $handler->display->display_options['style_plugin'] = 'table';
  /* Field: Content: Title */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'node';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
  /* Field: Content: Staða */
  $handler->display->display_options['fields']['field_indication_status_ref']['id'] = 'field_indication_status_ref';
  $handler->display->display_options['fields']['field_indication_status_ref']['table'] = 'field_data_field_indication_status_ref';
  $handler->display->display_options['fields']['field_indication_status_ref']['field'] = 'field_indication_status_ref';
  /* Field: Content: Post date */
  $handler->display->display_options['fields']['created']['id'] = 'created';
  $handler->display->display_options['fields']['created']['table'] = 'node';
  $handler->display->display_options['fields']['created']['field'] = 'created';
  $handler->display->display_options['fields']['created']['label'] = 'Skráð þann';
  $handler->display->display_options['fields']['created']['date_format'] = 'short';
  $handler->display->display_options['fields']['created']['second_date_format'] = 'long';
  /* Field: Content: Updated/commented date */
  $handler->display->display_options['fields']['last_updated']['id'] = 'last_updated';
  $handler->display->display_options['fields']['last_updated']['table'] = 'node_comment_statistics';
  $handler->display->display_options['fields']['last_updated']['field'] = 'last_updated';
  $handler->display->display_options['fields']['last_updated']['label'] = 'Síðast uppfærð';
  $handler->display->display_options['fields']['last_updated']['date_format'] = 'short';
  $handler->display->display_options['fields']['last_updated']['second_date_format'] = 'long';
  /* Sort criterion: Content: Post date */
  $handler->display->display_options['sorts']['created']['id'] = 'created';
  $handler->display->display_options['sorts']['created']['table'] = 'node';
  $handler->display->display_options['sorts']['created']['field'] = 'created';
  $handler->display->display_options['sorts']['created']['order'] = 'DESC';
  /* Contextual filter: Content: Ábyrgðaraðili (field_indication_controller_new) */
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['id'] = 'field_indication_controller_new_target_id';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['table'] = 'field_data_field_indication_controller_new';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['field'] = 'field_indication_controller_new_target_id';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['default_action'] = 'default';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['default_argument_type'] = 'current_user';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['summary']['number_of_records'] = '0';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['summary']['format'] = 'default_summary';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['summary_options']['items_per_page'] = '25';
  /* Filter criterion: Content: Published */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Filter criterion: Content: Type */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'indications' => 'indications',
  );
  /* Filter criterion: Content: Staða (field_indication_status_ref) */
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['id'] = 'field_indication_status_ref_tid';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['table'] = 'field_data_field_indication_status_ref';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['field'] = 'field_indication_status_ref_tid';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['value'] = array(
    0 => '269',
  );
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['vocabulary'] = 'indication_status';

  /* Display: Nýjar ábendingar */
  $handler = $view->new_display('block', 'Nýjar ábendingar', 'block');
  $handler->display->display_options['defaults']['title'] = FALSE;
  $handler->display->display_options['title'] = 'Nýjar ábendingar';
  $handler->display->display_options['defaults']['arguments'] = FALSE;

  /* Display: Mínar ábendingar */
  $handler = $view->new_display('block', 'Mínar ábendingar', 'block_1');
  $handler->display->display_options['defaults']['filter_groups'] = FALSE;
  $handler->display->display_options['defaults']['filters'] = FALSE;
  /* Filter criterion: Content: Published */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Filter criterion: Content: Type */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'indications' => 'indications',
  );
  /* Filter criterion: Content: Ábendingategund (field_indication_type_ref) */
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['id'] = 'field_indication_type_ref_tid';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['table'] = 'field_data_field_indication_type_ref';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['field'] = 'field_indication_type_ref_tid';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['exposed'] = TRUE;
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['expose']['operator_id'] = 'field_indication_type_ref_tid_op';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['expose']['label'] = 'Ábendingategund';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['expose']['operator'] = 'field_indication_type_ref_tid_op';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['expose']['identifier'] = 'field_indication_type_ref_tid';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['expose']['remember_roles'] = array(
    2 => '2',
    1 => 0,
    3 => 0,
  );
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['type'] = 'select';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['vocabulary'] = 'indication_types';
  /* Filter criterion: Content: Staða (field_indication_status_ref) */
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['id'] = 'field_indication_status_ref_tid';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['table'] = 'field_data_field_indication_status_ref';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['field'] = 'field_indication_status_ref_tid';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['exposed'] = TRUE;
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['expose']['operator_id'] = 'field_indication_status_ref_tid_op';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['expose']['label'] = 'Staða';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['expose']['operator'] = 'field_indication_status_ref_tid_op';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['expose']['identifier'] = 'field_indication_status_ref_tid';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['expose']['remember_roles'] = array(
    2 => '2',
    1 => 0,
    3 => 0,
  );
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['type'] = 'select';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['vocabulary'] = 'indication_status';

  /* Display: Óhreyfðar ábendingar */
  $handler = $view->new_display('block', 'Óhreyfðar ábendingar', 'block_2');
  $handler->display->display_options['defaults']['title'] = FALSE;
  $handler->display->display_options['title'] = 'Óhreyfðar ábendingar';
  $handler->display->display_options['defaults']['arguments'] = FALSE;
  $handler->display->display_options['defaults']['filter_groups'] = FALSE;
  $handler->display->display_options['defaults']['filters'] = FALSE;
  /* Filter criterion: Content: Published */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Filter criterion: Content: Type */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'indications' => 'indications',
  );
  /* Filter criterion: Content: Updated date */
  $handler->display->display_options['filters']['changed']['id'] = 'changed';
  $handler->display->display_options['filters']['changed']['table'] = 'node';
  $handler->display->display_options['filters']['changed']['field'] = 'changed';
  $handler->display->display_options['filters']['changed']['operator'] = '<=';
  $handler->display->display_options['filters']['changed']['value']['value'] = '-5 days';
  $handler->display->display_options['filters']['changed']['value']['type'] = 'offset';
  $translatables['indications'] = array(
    t('Master'),
    t('Mínar ábendingar'),
    t('more'),
    t('Apply'),
    t('Reset'),
    t('Sort by'),
    t('Asc'),
    t('Desc'),
    t('Title'),
    t('Staða'),
    t('Skráð þann'),
    t('Síðast uppfærð'),
    t('All'),
    t('Nýjar ábendingar'),
    t('Ábendingategund'),
    t('Óhreyfðar ábendingar'),
  );

  $export['test'] = $view;

  return $export;
}
