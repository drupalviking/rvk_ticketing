<?php
define('RVK_TICKETING_MM_CHECKWORD_IDS', variable_get('mm_checkword_ids'));
/**
 * MODULE FILE
 */

/**
 * Implements hook_menu().
 */
function rvk_ticketing_menu() {
  $items['senda-inn-abendingu'] = [
    'title' => 'Senda inn ábendingu',
    'page_callback' => 'rvk_ticketing_create_ticket_page',
    'access arguments' => ['access content'],
  ];

  $items['admin/config/services/abendingar'] = array(
    'title' => t('Ábendingar config'),
    'description' => 'Misc settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rvk_ticketing_admin'),
    'file' => 'rvk_ticketing.admin.inc',
    'file path' => drupal_get_path('module', 'rvk_ticketing'),
    'access arguments' => array('administer borgarvefsja settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements form_alter().
 */
function rvk_ticketing_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'indications_node_form') {
    if(isset($form['#node'])) {
      if(is_object($form['#node'])) {
        if(isset($form['#node']->field_mainmanager_id[LANGUAGE_NONE][0])) {
          $form['field_sent_to_mainmanager']['#access'] = FALSE;
          $form['field_mm_checkword_item']['#access'] = FALSE;
          $form['field_mainmanager_id']['#access'] = FALSE;
          $mm_id = $form['#node']->field_mainmanager_id[LANGUAGE_NONE][0]['value'];
          $form['field_fake']['#markup'] =
            "<p><strong>Tilkynning hefur verið send til Mainmanager. Kenni tilkynningar er: {$mm_id}</strong></p>";
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function rvk_ticketing_node_presave($node) {
  $a = 10;
  if($node->type == 'indications') {
    //If the node is cloned, the node is marked as new. And we do NOT want to
    //clone the Mainmanager settings from the old node to the new!
    if($node->is_new) {
      unset($node->field_sent_to_mainmanager[LANGUAGE_NONE][0]);
      unset($node->field_mm_checkword_item[LANGUAGE_NONE][0]);
      unset($node->field_mainmanager_id[LANGUAGE_NONE][0]);
    }
    else if(isset($node->field_forward_to_external_dp[LANGUAGE_NONE][0])) {
      if(isset($node->field_forward_to_external_dp[LANGUAGE_NONE][0]['tid'])) {
        $indication_status_voc = taxonomy_vocabulary_machine_name_load('indication_status');
        $indication_tax = _rvk_ticketing_find_indication_status_by_name($indication_status_voc->vid, 'Lokið');
        $node->field_indication_status_ref[LANGUAGE_NONE][0]['tid'] = $indication_tax->tid;
      }
    }
    else {
      if(isset($node->field_sent_to_mainmanager[LANGUAGE_NONE][0])) {
        //If the checkbox "Send to Mainmanager" is checked, but the Mainmanager
        //ID field is empty, create a node in Mainmanager
        if($node->field_sent_to_mainmanager[LANGUAGE_NONE][0]['value'] == 1) {
          if(!isset($node->field_mainmanager_id[LANGUAGE_NONE][0])) {
            //Default value of 'General'
            $checkword_item_id = 15;
            if (isset($node->field_mm_checkword_item[LANGUAGE_NONE][0])) {
              $checkword_item = taxonomy_term_load(
                $node->field_mm_checkword_item[LANGUAGE_NONE][0]['tid']
              );

              $checkword_item_id = $checkword_item->field_cwi_record_id[LANGUAGE_NONE][0]['value'];
            }
            $data_object = mainmanager_create_incident_data_object(
              $node->title,
              $node->field_interpered_indication_text[LANGUAGE_NONE][0]['value'],
              $node->field_indication_reporter_name[LANGUAGE_NONE][0]['value'],
              6,
              $checkword_item_id,
              $node->field_indication_reporter_email[LANGUAGE_NONE][0]['value'],
              $node->field_indication_reporter_phone[LANGUAGE_NONE][0]['value'],
              $node->field_indication_position_x[LANGUAGE_NONE][0]['value'],
              $node->field_indication_position_y[LANGUAGE_NONE][0]['value']
            );

            $mainmanager_response = mainmanager_create_incident($data_object);
            if (is_object($mainmanager_response)) {
              if ($mainmanager_response->Success == TRUE) {
                $node->field_mainmanager_id[LANGUAGE_NONE][0]['value'] =
                  $mainmanager_response->ID;
                node_save($node);
              }
              else {
                drupal_set_message('Villa kom upp við skráningu á tilkynningu í Mainmanager');
              }
            }
            else {
              //error occurred
              drupal_set_message('Villa kom upp við skráningu á tilkynningu í Mainmanager');
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function rvk_ticketing_node_update($node) {
  if ($node->type == 'indications') {
    register_shutdown_function('_rvk_ticketing_send_report_email', $node);
  }
}

function _rvk_ticketing_send_report_email($node) {
  $node_indication_status = taxonomy_term_load($node->field_indication_status_ref[LANGUAGE_NONE][0]['tid']);
  $link_to_node = url(drupal_get_path_alias('node/' . $node->nid), array('absolute' => TRUE));
  $email = $node->field_incication_reporter_email[LANGUAGE_NONE][0]['value'];
  $key = null;
  $subject = null;
  $message = null;

  if(strcmp('Ný ábending', $node_indication_status->name) == 0) {
    $key = 'new_indication';
    $subject = 'Takk fyrir ábendinguna';
    $message = variable_get('first_email');
    $message .= "\n\n" . 'Hér getur þú fylgst með gangi mála: <a href="' . $link_to_node . '">Ábendingin þín</a>';
    $message .= "\n\n" . 'Með bestu kveðju, Þjónustumiðstöð Reykjavíkurborgar.';
  }
  if(strcmp('Lokið', $node_indication_status->name) == 0) {
    $key = 'closed_indication';
    $subject = 'Ábendingu lokað';
    $message = variable_get('closing_email');
    $message .= "\n\n" . 'Hér getur þú fylgst með gangi mála: <a href="' . $link_to_node . '">Ábendingin þín</a>';
    $message .= "\n\n" . 'Með bestu kveðju, Þjónustumiðstöð Reykjavíkurborgar.';
  }

  if($key && $subject && $message) {
    $params = [
      'subject' => $subject,
      'body' => check_markup(
        $message, 'plain_text'
      ),
    ];
    drupal_mail('rvk_ticketing', $key, $email, language_default(), $params);
  }
}

function rvk_ticketing_node_validate($node) {
  if($node->type == 'indications') {
    if(isset($node->field_sent_to_mainmanager[LANGUAGE_NONE])) {
      if($node->field_sent_to_mainmanager[LANGUAGE_NONE][0]['value']) {
        $parents = taxonomy_get_parents($node->field_mm_checkword_item[LANGUAGE_NONE][0]['tid']);
        if(sizeof($parents) == 0) {
          form_set_error('wrong_category', 'Velja þarf undirflokk fyrir Mainmanager flokkakerfið');
        }
      }
    }
  }
}
/**
 * Implements hook_permission().
 */
function rvk_ticketing_permission() {
  return array(
    'view ticketing content' => array(
      'title' => t('View ticketing content'),
    ),
    'administer ticketing content' => array(
      'title' => t('Administer ticketing content'),
    ),
  );
}

/**
 * Creates a page for the ticket to be displayed on
 *
 * @return array
 */
function rvk_ticketing_create_ticket_page() {
  $build = [
    'header_text' => [
      '#type' => 'markup',
      '#markup' => '<h2>Senda inn ábendingu</h2>',
    ],
    //'indication_form' => drupal_get_form('rvk_ticketing_create_ticket_form'),
  ];

  return $build;
}

/**
 * Implements hook_block_info().
 */
function rvk_ticketing_block_info() {
  $blocks['indication_form'] = [
    'info' => 'Ábendingarform',
  ];

  $blocks['test_block'] = [
    'info' => 'Test block for Ticketing',
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function rvk_ticketing_block_view($delta = '') {
  $markup = '';
  if($delta == 'indication_form') {
    $form = drupal_get_form('rvk_ticketing_create_ticket_form');
    $markup .= drupal_render($form);
  }

  if($delta == 'test_block') {
    //rvk_ticketing_populate_checkword_items_taxonomy_vocabulary();
  }

  $block['content'] = $markup;

  return $block;
}

/**
 * Form for submission of Incident
 *
 * @author Drupalviking (drupalviking@1xinternet.de)
 * @param $form
 * @param $form_state
 * @return mixed
 */
function rvk_ticketing_create_ticket_form($form, &$form_state) {
  $form['#attached']['css'] = [
    'https://js.arcgis.com/3.13/esri/css/esri.css' => [
      'type' => 'external',
    ],
    drupal_get_path('module', 'rvk_ticketing') . '/css/geolocation.css',
    drupal_get_path('module', 'rvk_ticketing') . '/css/styles.css',
  ];

  $form['indication_fieldset'] = [
    '#type' => 'fieldset',
    '#weight' => 10,
  ];

  $form['indication_fieldset']['indication_text_fieldset'] = [
    '#type' => 'fieldset',
    '#weight' => 10,
  ];

  $form['indication_fieldset']['image_fieldset'] = [
    '#type' => 'fieldset',
    '#weight' => 32,
  ];

  $form['indication_fieldset']['image_fieldset']['pre_markup'] = [
    '#type' => 'markup',
    '#weight' => 1,
    '#markup' => '<h3><span class="toggle-icon"></span>Senda mynd</h3><div class="collapse">'
  ];

  $form['indication_fieldset']['image_fieldset']['post_markup'] = [
    '#type' => 'markup',
    '#weight' => 100,
    '#markup' => '</div>',
  ];

  $form['indication_fieldset']['map_fieldset'] = [
    '#type' => 'fieldset',
    '#weight' => 30,
  ];

  $form['indication_fieldset']['map_fieldset']['pre_markup'] = [
    '#type' => 'markup',
    '#weight' => 1,
    '#markup' => '<h3><span class="toggle-icon"></span>Veldu staðsetningu á korti</h3><div class="collapse">'
  ];

  $form['indication_fieldset']['map_fieldset']['post_markup'] = [
    '#type' => 'markup',
    '#weight' => 100,
    '#markup' => '</div>',
  ];

  $form['indication_fieldset']['map_fieldset']['map'] = [
    '#type' => 'fieldset',
    '#weight' => 20,
  ];

  $form['indication_fieldset']['map_fieldset']['address'] = [
    '#type' => 'fieldset',
    '#weight' => 30,
  ];

  $form['personal_info_fieldset'] = [
    '#type' => 'fieldset',
    '#weight' => 20,
  ];

  $form['indication_fieldset']['markup'] = [
    '#type' => 'markup',
    '#markup' => '<h2>Senda ábendingu</h2><p>Hér geturðu sent ábendingu um hvað sem er. Ábendingin mun berast þjónustuverinu okkar sem svarar strax eða kemur áfram á réttan stað.</p>',
  ];

  $form['indication_fieldset']['indication_text_fieldset']['title'] = [
    '#type' => 'textfield',
    '#title' => 'Titill',
    '#required' => TRUE,
  ];

  $form['indication_fieldset']['indication_text_fieldset']['content'] = [
    '#type' => 'textarea',
    '#title' => 'Efni ábendingar',
    '#required' => TRUE,
  ];

  $form['indication_fieldset']['image_fieldset']['image'] = [
    '#type' => 'managed_file',
    '#title' => 'Mynd',
    '#description' => 'Sendu inn mynd með tilkynningunni, til að gera betri grein fyrir henni',
    '#upload_location' => 'public://',
    '#weight' => 50,
  ];

  $form['indication_fieldset']['map_fieldset']['markup_location'] = [
    '#type' => 'markup',
    '#markup' => '<p>Þú getur slegið inn heimilisfang eða sett punkt á kortið með því að smella á þann stað á kortinu sem tengist ábendingunni. Ef þú ert í snjallsíma geturðu virkjað staðsetninguna þína með því að ýta á <span class="locate-icon"></span> hnappinn á kortinu.</p>',
    '#weight' => 21,
  ];

  $form['indication_fieldset']['map_fieldset']['map']['map_markup'] = [
    '#type' => 'markup',
    '#prefix' => '<div id="mapDiv">',
    '#postfix' => '</div>',
    '#markup' => '<div id="LocateButton"></div>',
    '#weight' => 20,
  ];

  $form['indication_fieldset']['map_fieldset']['address']['address'] = [
    '#type' => 'textfield',
    '#title' => 'Staðsetning (Götuheiti í nefnifalli)',
    '#autocomplete_path' => 'gata/fletta_upp_gotu_autocomplete_callback',
    '#weight' => 10,
  ];



  $form['indication_fieldset']['map_fieldset']['xcoords'] = [
    '#type' => 'hidden',
    '#title' => 'xcoords',
    '#attributes' => [
      'id' => ['xcoords']
    ],
  ];

  $form['indication_fieldset']['map_fieldset']['ycoords'] = [
    '#type' => 'hidden',
    '#title' => 'ycoords',
    '#attributes' => [
      'id' => ['ycoords']
    ],
  ];



  $form['personal_info_fieldset']['markup'] = [
    '#type' => 'markup',
    '#markup' => '<h2>Viltu fylgjast með ábendingunni?</h2><p>Ef þú vilt vita hvað verður um ábendinguna þína er nauðsynlegt að fylla þessa reiti út. Ef ekki geturðu smellt á senda hnappinn hér að neðan.</p>',
  ];

  $form['personal_info_fieldset']['name'] = [
    '#type' => 'textfield',
    '#title' => 'Nafn',
  ];

  $form['personal_info_fieldset']['ssn'] = [
    '#type' => 'textfield',
    '#title' => 'Kennitala',
  ];

  $form['personal_info_fieldset']['email'] = [
    '#type' => 'textfield',
    '#title' => 'Netfang',
  ];

  $form['personal_info_fieldset']['tel'] = [
    '#type' => 'textfield',
    '#title' => 'Sími',
  ];

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Senda',
    '#weight' => 200,
  );

  $form['#attached']['js'] = array(
    'https://js.arcgis.com/3.13/init.js' => array(
      'type' => 'external',
    ),
    drupal_get_path('module', 'rvk_ticketing') . '/js/geolocation.js',
    drupal_get_path('module', 'rvk_ticketing') . '/js/indication.js',
  );

  return $form;
}

/**
 * Implements hook_form_validate().
 */
function rvk_ticketing_create_ticket_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  if(strlen($values['xcoords']) == 0 && strlen($values['address']) == 0) {
    form_set_error('address', 'Velja þarf annað hvort stað á korti eða slá inn heimilisfang');
  }
  elseif(strlen($values['xcoords']) == 0 && strlen($values['ycoords']) == 0 && strlen($values['address']) > 0) {
    if(!rvk_ticket_check_street_address_valid($values['address'])) {
      form_set_error('address', 'Svo virðist sem ekki hafi verið valið rétt heimilisfang.');
    }
  }

  if(strlen($values['ssn']) > 0) {
    if(!_rvk_ticketing_ssn_validation($values['ssn'])) {
      form_set_error('ssn', 'Kennitalan virðist ekki vera rétt, vinsamlegast athugið hana.');
    }
  }
}

/**
 * Checks to see if the address entered is valid, by looking up the address name
 * at Borgarvefsja API
 *
 * @param string $address The Address to validate
 * @return bool
 */
function rvk_ticket_check_street_address_valid($address) {
  $street = borgarvefsja_search_by_address($address);
  return($street[0]['text'] != $address) ? false : true;
}

/**
 * Implements hook_form_submit().
 *
 * Since it's a multistep form, validations on where the user is in it, are in
 * place.
 */

function rvk_ticketing_create_ticket_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  if($values['image']) {
    $file = file_load((int)$values['image']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    $values['image'] = $file;
  }

  if(strlen($values['xcoords']) == 0 && strlen($values['ycoords']) == 0 && strlen($values['address']) > 0) {
    //Send another query to the Street lookup API, to get the X and Y coords
    $street = borgarvefsja_search_by_address($values['address']);
    $values['xcoord'] = $street[0]['x'];
    $values['ycoord'] = $street[0]['y'];
  }

  rvk_ticketing_create_indication_node($values);
  drupal_set_message('<p>Takk fyrir að senda ábendingu til okkar.</p>
<p>Þjónustuver borgarinnar vinnur úr ábendingum alla virka daga og kemur þeim á réttan stað.</p> 
<p><strong>Ef um um er að ræða neyðartilfelli hafðu þá samband við 112.</strong></p>');
}

/**
 * Creates one indication node, based on the values the user submits.
 *
 * @param array $data The data comes from a form
 * @return \stdClass
 */
function rvk_ticketing_create_indication_node($data) {
  $node = new stdClass();
  $node->title = $data['title'];
  $node->type = 'indications';
  node_object_prepare($node);

  $node->field_indication_text[LANGUAGE_NONE][0]['value'] = $data['content'];
  $node->field_interpered_indication_text[LANGUAGE_NONE][0]['value'] = $data['content'];
  if(isset($data['address'])) {
    $node->field_indication_location[LANGUAGE_NONE][0]['value'] = $data['address'];
  }
  elseif(isset($data['xcoord'])) {
    $node->field_indication_position_x[LANGUAGE_NONE][0]['value'] = $data['xcoord'];
    $node->field_indication_position_y[LANGUAGE_NONE][0]['value'] = $data['ycoord'];
  }

  $node->field_indication_reporter_name[LANGUAGE_NONE][0]['value'] = $data['name'];
  $node->field_indication_reporter_ssn[LANGUAGE_NONE][0]['value'] = $data['ssn'];
  $node->field_indication_reporter_email[LANGUAGE_NONE][0]['value'] = $data['email'];
  $node->field_indication_reporter_phone[LANGUAGE_NONE][0]['value'] = $data['tel'];

  $tax_vocabulary = taxonomy_vocabulary_machine_name_load('indication_status');
  $taxonomy = taxonomy_get_tree($tax_vocabulary->vid);
  $status_default_tid = null;
  foreach($taxonomy as $tax) {
    if($tax->name == 'Ný ábending') {
      $status_default_tid = $tax->tid;
    }
  }

  if(is_object($data['image'])) {
    $node->field_image[LANGUAGE_NONE][0]['fid'] = $data['image']->fid;
  }

  $node->field_indication_status_ref[LANGUAGE_NONE][0]['tid'] = $status_default_tid;
  $node->language = 'is';
  $node->is_new = true;

  node_save($node);

  return $node;
}

/**
 * Implements hook_views_api().
 */
function rvk_ticketing_views_api() {
  list($module, $api) = func_get_args();
  if ($module == "views" && $api == "views_default") {
    return array("api" => "3.0");
  }
}

/**
 * Gets one Incident by ID, by calling the MainManager API
 *
 * @param int $id
 * @return \stdClass
 */
function rvk_ticketing_get_incident_by_id($id) {
  return mainmanager_get_incident_by_id($id);
}

/**
 * Populates the Parents part of the Checkword Vocabulary.
 *
 * Checkwords @Mainmanager consists of two things, Parents (Checkwords) and
 * children (Checkword Items).
 *
 * In order to reduce the complexity of the function, I spilt them up in two,
 * populate parents and populate checkword items.
 */
function rvk_ticketing_populate_checkword_items_parents_taxonomy_vocabulary() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('checkword_items');
  $terms = taxonomy_get_tree($vocabulary->vid);

  $checkwords_to_fetch = explode(',', RVK_TICKETING_MM_CHECKWORD_IDS);
  $checkwords = mainmanager_get_checkwords();

  $tree = [];
  if(is_array($terms)) {
    foreach($terms as $term) {
      $t_item = taxonomy_term_load($term->tid);
      $tree[$term->name] = $t_item;
    }
  }

  foreach($checkwords as $checkword) {
    foreach($checkwords_to_fetch as $checkword_fetched) {
      if($checkword['RecordID'] == $checkword_fetched) {
        if(!array_key_exists($checkword['Name'], $tree)) {
          _rvk_ticketing_create_checkword_tax_term($checkword, $vocabulary, false);
        }
      }
    }
  }
}

/**
 * Populates the Checkword Items Taxonomy Vocabulary with terms from the
 * Main manager Rest API. The Checkwords are set by admin settings
 * (/admin/config/services/abendingar)
 */
function rvk_ticketing_populate_checkword_items_taxonomy_vocabulary() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('checkword_items');
  $terms = taxonomy_get_tree($vocabulary->vid);

  $checkwords_to_fetch = explode(',', RVK_TICKETING_MM_CHECKWORD_IDS);

  $tree = [];
  if(is_array($terms)) {
    foreach($terms as $term) {
      $t_item = taxonomy_term_load($term->tid);
      $tree[$term->name] = $t_item;
    }
  }

  foreach($checkwords_to_fetch as $checkword_fetched) {
    $results = mainmanager_get_checkword_items((int)$checkword_fetched);

    if(is_array($results)) {
      foreach($results as $result) {
        if(!array_key_exists($result['Name'], $tree)) {
          $parent_term = _rvk_ticketing_find_checkword_parent_term($vocabulary->vid, (int)$checkword_fetched);
          _rvk_ticketing_create_checkword_tax_term($result, $vocabulary, $parent_term);
        }
      }
    }
  }
}

/**
 * Helper function to search for a particular taxonomy term, by the checkword
 * Record ID.
 *
 * @param $vid
 * @param $checkword_id
 * @return array|null
 */
function _rvk_ticketing_find_checkword_parent_term($vid, $checkword_id) {
  $results = null;
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->fieldCondition('field_cwi_record_id', 'value', $checkword_id, '=')
    ->execute();

  if (!empty($result['taxonomy_term'])) {
    $results = entity_load('taxonomy_term', array_keys($result['taxonomy_term']));
    $results = array_values($results);
    $results = $results[0];
  }

  return $results;
}

function _rvk_ticketing_find_indication_status_by_name($vid, $status_name) {
  $results = null;
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vid)
    ->propertyCondition('name', $status_name, '=')
    ->execute();

  if (!empty($result['taxonomy_term'])) {
    $results = entity_load('taxonomy_term', array_keys($result['taxonomy_term']));
    $results = array_values($results);
    $results = $results[0];
  }

  return $results;
}

/**
 * Creates a checkword taxonomy term
 *
 * @param $result
 * @param $vocabulary
 * @return \stdClass
 */
function _rvk_ticketing_create_checkword_tax_term($result, $vocabulary, $parent_term = false) {
  $term = new stdClass();
  $term->name = $result['Name'];
  $term->vid = $vocabulary->vid;
  taxonomy_term_save($term);

  $term->field_cwi_record_id[LANGUAGE_NONE][0]['value'] = $result['RecordID'];
  $term->field_cwi_record_id[LANGUAGE_NONE][0]['format'] = NULL;
  $term->field_cwi_record_id[LANGUAGE_NONE][0]['safe_value'] = $result['RecordID'];

  $term->field_cwi_number[LANGUAGE_NONE][0]['value'] = $result['Nr'];
  $term->field_cwi_number[LANGUAGE_NONE][0]['format'] = NULL;
  $term->field_cwi_number[LANGUAGE_NONE][0]['safe_value'] = $result['Nr'];

  $term->field_cwi_incident_mode[LANGUAGE_NONE][0]['value'] = $result['IncidentMode'][0];
  $term->field_cwi_incident_mode[LANGUAGE_NONE][0]['format'] = NULL;
  $term->field_cwi_incident_mode[LANGUAGE_NONE][0]['safe_value'] = $result['IncidentMode'][0];

  if($parent_term) {
    $term->parent = $parent_term->tid;
  }

  if ($result['Nr'] > 9) {
    $term->weight = $result['Nr'] * 10;
  }
  else {
    $term->weight = $result['Nr'];
  }

  taxonomy_term_save($term);
  return $term;
}
/**
 * Implements hook_views_default_views().
 */
function rvk_ticketing_views_default_views() {
  $export = [];

  $view = new view();
  $view->name = 'indications';
  $view->description = '';
  $view->tag = 'default';
  $view->base_table = 'node';
  $view->human_name = 'Ábendingar';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = 'Mínar ábendingar';
  $handler->display->display_options['use_ajax'] = TRUE;
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'some';
  $handler->display->display_options['pager']['options']['items_per_page'] = '10';
  $handler->display->display_options['style_plugin'] = 'table';
  /* Field: Content: Title */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'node';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
  /* Field: Content: Staða */
  $handler->display->display_options['fields']['field_indication_status_ref']['id'] = 'field_indication_status_ref';
  $handler->display->display_options['fields']['field_indication_status_ref']['table'] = 'field_data_field_indication_status_ref';
  $handler->display->display_options['fields']['field_indication_status_ref']['field'] = 'field_indication_status_ref';
  /* Field: Content: Post date */
  $handler->display->display_options['fields']['created']['id'] = 'created';
  $handler->display->display_options['fields']['created']['table'] = 'node';
  $handler->display->display_options['fields']['created']['field'] = 'created';
  $handler->display->display_options['fields']['created']['label'] = 'Skráð þann';
  $handler->display->display_options['fields']['created']['date_format'] = 'short';
  $handler->display->display_options['fields']['created']['second_date_format'] = 'long';
  /* Field: Content: Updated/commented date */
  $handler->display->display_options['fields']['last_updated']['id'] = 'last_updated';
  $handler->display->display_options['fields']['last_updated']['table'] = 'node_comment_statistics';
  $handler->display->display_options['fields']['last_updated']['field'] = 'last_updated';
  $handler->display->display_options['fields']['last_updated']['label'] = 'Síðast uppfærð';
  $handler->display->display_options['fields']['last_updated']['date_format'] = 'short';
  $handler->display->display_options['fields']['last_updated']['second_date_format'] = 'long';
  /* Sort criterion: Content: Post date */
  $handler->display->display_options['sorts']['created']['id'] = 'created';
  $handler->display->display_options['sorts']['created']['table'] = 'node';
  $handler->display->display_options['sorts']['created']['field'] = 'created';
  $handler->display->display_options['sorts']['created']['order'] = 'DESC';
  /* Contextual filter: Content: Ábyrgðaraðili (field_indication_controller_new) */
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['id'] = 'field_indication_controller_new_target_id';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['table'] = 'field_data_field_indication_controller_new';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['field'] = 'field_indication_controller_new_target_id';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['default_action'] = 'default';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['default_argument_type'] = 'current_user';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['summary']['number_of_records'] = '0';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['summary']['format'] = 'default_summary';
  $handler->display->display_options['arguments']['field_indication_controller_new_target_id']['summary_options']['items_per_page'] = '25';
  /* Filter criterion: Content: Published */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Filter criterion: Content: Type */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'indications' => 'indications',
  );
  /* Filter criterion: Content: Staða (field_indication_status_ref) */
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['id'] = 'field_indication_status_ref_tid';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['table'] = 'field_data_field_indication_status_ref';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['field'] = 'field_indication_status_ref_tid';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['value'] = array(
    0 => '269',
  );
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['vocabulary'] = 'indication_status';

  /* Display: Nýjar ábendingar */
  $handler = $view->new_display('block', 'Nýjar ábendingar', 'block');
  $handler->display->display_options['defaults']['title'] = FALSE;
  $handler->display->display_options['title'] = 'Nýjar ábendingar';
  $handler->display->display_options['defaults']['arguments'] = FALSE;

  /* Display: Mínar ábendingar */
  $handler = $view->new_display('block', 'Mínar ábendingar', 'block_1');
  $handler->display->display_options['defaults']['filter_groups'] = FALSE;
  $handler->display->display_options['defaults']['filters'] = FALSE;
  /* Filter criterion: Content: Published */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Filter criterion: Content: Type */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'indications' => 'indications',
  );
  /* Filter criterion: Content: Ábendingategund (field_indication_type_ref) */
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['id'] = 'field_indication_type_ref_tid';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['table'] = 'field_data_field_indication_type_ref';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['field'] = 'field_indication_type_ref_tid';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['exposed'] = TRUE;
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['expose']['operator_id'] = 'field_indication_type_ref_tid_op';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['expose']['label'] = 'Ábendingategund';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['expose']['operator'] = 'field_indication_type_ref_tid_op';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['expose']['identifier'] = 'field_indication_type_ref_tid';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['expose']['remember_roles'] = array(
    2 => '2',
    1 => 0,
    3 => 0,
  );
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['type'] = 'select';
  $handler->display->display_options['filters']['field_indication_type_ref_tid']['vocabulary'] = 'indication_types';
  /* Filter criterion: Content: Staða (field_indication_status_ref) */
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['id'] = 'field_indication_status_ref_tid';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['table'] = 'field_data_field_indication_status_ref';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['field'] = 'field_indication_status_ref_tid';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['exposed'] = TRUE;
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['expose']['operator_id'] = 'field_indication_status_ref_tid_op';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['expose']['label'] = 'Staða';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['expose']['operator'] = 'field_indication_status_ref_tid_op';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['expose']['identifier'] = 'field_indication_status_ref_tid';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['expose']['remember_roles'] = array(
    2 => '2',
    1 => 0,
    3 => 0,
  );
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['type'] = 'select';
  $handler->display->display_options['filters']['field_indication_status_ref_tid']['vocabulary'] = 'indication_status';

  /* Display: Óhreyfðar ábendingar */
  $handler = $view->new_display('block', 'Óhreyfðar ábendingar', 'block_2');
  $handler->display->display_options['defaults']['title'] = FALSE;
  $handler->display->display_options['title'] = 'Óhreyfðar ábendingar';
  $handler->display->display_options['defaults']['arguments'] = FALSE;
  $handler->display->display_options['defaults']['filter_groups'] = FALSE;
  $handler->display->display_options['defaults']['filters'] = FALSE;
  /* Filter criterion: Content: Published */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Filter criterion: Content: Type */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'indications' => 'indications',
  );
  /* Filter criterion: Content: Updated date */
  $handler->display->display_options['filters']['changed']['id'] = 'changed';
  $handler->display->display_options['filters']['changed']['table'] = 'node';
  $handler->display->display_options['filters']['changed']['field'] = 'changed';
  $handler->display->display_options['filters']['changed']['operator'] = '<=';
  $handler->display->display_options['filters']['changed']['value']['value'] = '-5 days';
  $handler->display->display_options['filters']['changed']['value']['type'] = 'offset';
  $translatables['indications'] = array(
    t('Master'),
    t('Mínar ábendingar'),
    t('more'),
    t('Apply'),
    t('Reset'),
    t('Sort by'),
    t('Asc'),
    t('Desc'),
    t('Title'),
    t('Staða'),
    t('Skráð þann'),
    t('Síðast uppfærð'),
    t('All'),
    t('Nýjar ábendingar'),
    t('Ábendingategund'),
    t('Óhreyfðar ábendingar'),
  );

  $export['test'] = $view;

  return $export;
}

function _rvk_ticketing_ssn_validation($ssn) {
  $sanitised = (string) preg_replace('/[^0-9]/','', $ssn);
  $checksum = substr($sanitised,0,1)*3;
  $checksum += substr($sanitised,1,1)*2;
  $checksum += substr($sanitised,2,1)*7;
  $checksum += substr($sanitised,3,1)*6;
  $checksum += substr($sanitised,4,1)*5;
  $checksum += substr($sanitised,5,1)*4;
  $checksum += substr($sanitised,6,1)*3;
  $checksum += substr($sanitised,7,1)*2;

  $moduloRem = 11-fmod($checksum,11);
  if (($moduloRem == '11') && (substr($sanitised,8,1) === '0')) {
    return true;
  }
  elseif ($moduloRem == 10) {
    return false;
  }
  elseif ($moduloRem == substr($sanitised,8,1)) {
    return true;
  }
  else {
    return false;
  }
}

/**
 * Implements hook_mail().
 */
function rvk_ticketing_mail($key, &$message, $params) {
  switch ($key) {
    case 'new_incident':
    case 'closed_incident':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_theme().
 */
function rvk_ticketing_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['node__indications'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--indications',
    'path' => drupal_get_path('module', 'rvk_ticketing') . '/templates',
  );
  return $theme;
}

function rvk_ticketing_preprocess_page(&$vars, $hook) {
  //NOT WORKING :-(
  /*if ($vars['node']->type == 'indications') {
    $css = drupal_get_path('module', 'rvk_ticketing') . '/css/geolocation.css';
    $js = drupal_get_path('module', 'rvk_ticketing') . '/js/geolocation.js';
    drupal_add_css('https://js.arcgis.com/3.13/esri/css/esri.css', 'external');
    drupal_add_css($css);
    drupal_add_js(drupal_get_path('module', 'rvk_ticketing') . '/js/init.js');
    drupal_add_js($js);
  }
  */
}

/**
 * This is a multi step form.  Step one is at the bottom of the code, but other
 * steps are in logical order
 *
 * @author Drupalviking (drupalviking@1xinternet.de)
 * @param $form
 * @param $form_state
 * @return string
 */

/**
function rvk_ticketing_create_ticket_form($form, &$form_state) {
//Step two
if(isset($form_state['storage']) && $form_state['storage']['page_two']) {
$form['#attached']['css'] = [
'https://js.arcgis.com/3.13/esri/css/esri.css' => [
'type' => 'external',
],
drupal_get_path('module', 'rvk_ticketing') . '/css/geolocation.css',
];

$form['markup'] = [
'#type' => 'markup',
'#markup' => '<h2>Staðsetning á korti</h2>
<p>Þú getur slegið inn heimilisfang og/eða sett punkt á kortið með því að smella
á þann stað á kortinu sem tengist ábendingunni. Ef ábendingin krefst
ekki staðsetningar smelltu þá á áfram.</p>',
];

$form['address_fieldset'] = [
'#type' => 'fieldset',
'#weight' => 20,
'#collapsible' => TRUE,
'#collapsed' => TRUE,
'#title' => t('Address'),
];
$form['map_fieldset'] = [
'#type' => 'fieldset',
'#weight' => 10,
'#collapsible' => FALSE,
];
$form['address_fieldset']['address'] = [
'#type' => 'textfield',
'#title' => 'Staðsetning (Götuheiti í nefnifalli)',
'#autocomplete_path' => 'gata/fletta_upp_gotu_autocomplete_callback',
];
$form['map_fieldset']['map_markup'] = [
'#type' => 'markup',
'#prefix' => '<div id="mapDiv">',
'#postfix' => '</div>',
'#markup' => '<div id="LocateButton"></div>',
];
$form['xcoords'] = [
'#type' => 'hidden',
'#title' => 'xcoords',
'#attributes' => [
'id' => ['xcoords']
],
];
$form['ycoords'] = [
'#type' => 'hidden',
'#title' => 'ycoords',
'#attributes' => [
'id' => ['ycoords']
],
];

$form['submit'] = array(
'#type' => 'submit',
'#value' => 'Halda áfram',
'#weight' => 1000
);
$form['#attached']['js'] = array(
'https://js.arcgis.com/3.13/init.js' => array(
'type' => 'external',
),
drupal_get_path('module', 'rvk_ticketing') . '/js/geolocation.js',
);
}
//Step three
elseif(isset($form_state['storage']) && $form_state['storage']['page_three']) {
$form['markup'] = [
'#type' => 'markup',
'#markup' => '<h2>Upplýsingar um þig</h2>',
];
$form['name'] = [
'#type' => 'textfield',
'#title' => 'Nafn',
'#required' => TRUE,
];
$form['ssn'] = [
'#type' => 'textfield',
'#title' => 'Kennitala',
'#required' => TRUE,
];
$form['email'] = [
'#type' => 'textfield',
'#title' => 'Netfang',
'#required' => TRUE,
];
$form['tel'] = [
'#type' => 'textfield',
'#title' => 'Sími',
];

$form['submit'] = array(
'#type' => 'submit',
'#value' => 'Halda áfram',
);
}
//Original state (step 1) of the form
else {
$form['markup'] = [
'#type' => 'markup',
'#markup' => '<h2>Sendu okkur ábendingu</h2>',
];

$form['title'] = [
'#type' => 'textfield',
'#title' => 'Titill',
'#required' => TRUE,
];

$form['content'] = [
'#type' => 'textarea',
'#title' => 'Efni ábendingar',
'#required' => TRUE,
];

$form['image'] = [
'#type' => 'file',
'#title' => 'Mynd',
'#description' => 'Sendu inn mynd með tilkynningunni, til að gera betri grein fyrir henni'
];

$form['use_map'] = [
'#type' => 'radios',
'#title' => 'Nota kort eða staðsetningu með ábendingunni',
'#options' => ['yes' => 'Já', 'no' => 'Nei'],
'#default_value' => 'no',
];

$form['submit'] = array(
'#type' => 'submit',
'#value' => 'Halda áfram',
);
}

return $form;
}

function rvk_ticketing_create_ticket_form_validate($form, &$form_state) {
//If storage is not set, we're at step one
if(!isset($form_state['storage'])) {
$file = file_save_upload('file', array(
'file_validate_is_image' => array(),
'file_validate_extensions' => array('png gif jpg jpeg'),
));
if ($file) {
if ($file = file_move($file, 'public://')) {
$form_state['values']['file'] = $file;
}
else {
form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
}
}
else {
form_set_error('file', t('No file was uploaded.'));
}
}

if(isset($form_state['storage']) && $form_state['storage']['page_two'] == TRUE ) {
$values = $form_state['values'];
if(strlen($values['xcoords']) == 0 && strlen($values['address']) == 0) {
form_set_error('address', 'Velja þarf annað hvort stað á korti eða slá inn heimilisfang');
}
elseif(strlen($values['xcoords']) == 0 && strlen($values['ycoords']) == 0 && strlen($values['address']) > 0) {
if(!rvk_ticket_check_street_address_valid($values['address'])) {
form_set_error('address', 'Svo virðist sem ekki hafi verið valið rétt heimilisfang.');
}
}
}
if(isset($form_state['storage']) &&$form_state['storage']['page_three'] == TRUE ) {
$values = $form_state['values'];
if(!_rvk_ticketing_ssn_validation($values['ssn'])) {
form_set_error('ssn', 'Kennitalan virðist ekki vera rétt, vinsamlegast athugið hana.');
}
}
}

function rvk_ticketing_create_ticket_form_submit($form, &$form_state) {
$values = $form_state['values'];
//If storage is not set, we're at step one
if(!isset($form_state['storage'])) {
if($values['use_map'] == 'yes') {
$form_state['storage']['page_two'] = TRUE;
$form_state['storage']['page_three'] = FALSE;
$form_state['storage']['page_one_values'] = $values;
$form_state['rebuild'] = TRUE;
}
else {
$form_state['storage']['page_two'] = FALSE;
$form_state['storage']['page_three'] = TRUE;
$form_state['storage']['page_one_values'] = $values;
$form_state['storage']['page_two_values'] = null;
$form_state['rebuild'] = TRUE;
}

$file = $form_state['values']['file'];
unset($form_state['values']['file']);
$file->status = FILE_STATUS_PERMANENT;
file_save($file);
}
elseif(isset($form_state['storage']) && $form_state['storage']['page_two'] == TRUE ) {
$form_state['storage']['page_two'] = FALSE;
$form_state['storage']['page_three'] = TRUE;
$form_state['storage']['page_two_values'] = $values;
$form_state['rebuild'] = TRUE;

if(strlen($values['xcoords']) > 0 && strlen($values['ycoords']) > 0) {
$form_state['storage']['page_two_values']['xcoord'] = $values['xcoords'];
$form_state['storage']['page_two_values']['ycoord'] = $values['ycoords'];
unset($form_state['storage']['page_two_values']['address']);
}
elseif(strlen($values['xcoords']) == 0 && strlen($values['ycoords']) == 0 && strlen($values['address']) > 0) {
//Send another query to the Street lookup API, to get the X and Y coords
$street = borgarvefsja_search_by_address($values['address']);
$form_state['storage']['page_two_values']['xcoord'] = $street[0]['x'];
$form_state['storage']['page_two_values']['ycoord'] = $street[0]['y'];
}
}
elseif(isset($form_state['storage']) && $form_state['storage']['page_three'] == TRUE ) {
$form_state['storage']['page_three_values'] = $values;
rvk_ticketing_create_indication_node($form_state['storage']);
drupal_set_message('<p>Takk fyrir að senda ábendingu til okkar.</p>
<p>Þjónustuver borgarinnar vinnur úr ábendingum alla virka daga og kemur þeim á réttan stað.</p>
<p><strong>Ef um um er að ræða neyðartilfelli hafðu þá samband við 112.</strong></p>');
}
}
 */

